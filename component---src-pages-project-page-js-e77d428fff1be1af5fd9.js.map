{"version":3,"file":"component---src-pages-project-page-js-e77d428fff1be1af5fd9.js","mappings":"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","sources":["webpack://myweb3course/./src/components/content-editable/content-editable.js","webpack://myweb3course/./src/components/context/projects/project-data-context.js","webpack://myweb3course/./src/components/spinner/spinner.js","webpack://myweb3course/./src/components/projects/project-card.js","webpack://myweb3course/./src/components/projects/projects-view.js","webpack://myweb3course/./src/components/projects/project-management.js","webpack://myweb3course/./src/pages/project-page.js","webpack://myweb3course/./src/utils/api/fetch.js","webpack://myweb3course/./src/utils/auths/use-id-token.js","webpack://myweb3course/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\nimport he from 'he';\n\n/**\n * Make a div editable with text (could also be some HTML if needed).\n * @param {startContent} String to be used when the content is being updated\n * @param {children} React elements to be used when the content is not being updated\n * @returns\n */\n\nconst ContentEditable = ({\n  className,\n  isBeingEdited,\n  onChange,\n  startContent,\n  id,\n  isInline,\n  children,\n}) => {\n  //const [content, setContent] = useState(startContent);\n\n  const handleChange = (e) => {\n    const propUpdated = {};\n    propUpdated[id] = e.currentTarget.textContent;\n    // set state at parent level\n    onChange(propUpdated);\n  };\n\n  let currentContent;\n  if (isBeingEdited)\n    currentContent = startContent\n      ? he.decode(startContent)\n      : ''; \n  else if (children) currentContent = children;\n  else if (startContent)\n    currentContent = startContent ? he.decode(startContent) : '';\n\n  let allClasses;\n  allClasses = className ? className : '';\n  if (isBeingEdited)\n    allClasses += ' index__card__content__description--is-being-edited';\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\n\n  return (\n    <div\n      className={allClasses}\n      contentEditable={isBeingEdited ? true : false}\n      onInput={handleChange}\n      suppressContentEditableWarning={true}\n    >\n      {currentContent}\n    </div>\n  );\n};\n\nexport default ContentEditable;\n","import React, { useContext, useState } from 'react';\nimport callAPI from '../../../utils/api/fetch';\nimport { useMsal } from '@azure/msal-react';\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\n\nconst ProjectDataContext = React.createContext([\n  {},\n  () => {},\n  {},\n  () => {},\n  {},\n  () => {},\n  {},\n  () => {},\n]);\n\nconst ProjectDataProvider = ({ children }) => {\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\n  const [userData, setUserData] = useState(undefined);\n  const [projectData, setProjectData] = useState(undefined);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  return (\n    <ProjectDataContext.Provider\n      value={[\n        projectGroupData,\n        setProjectGroupData,\n        userData,\n        setUserData,\n        projectData,\n        setProjectData,\n        isLoaded,\n        setIsLoaded,\n      ]}\n    >\n      {children}\n    </ProjectDataContext.Provider>\n  );\n};\n\nconst useProjectData = () => {\n  const { instance, accounts } = useMsal();\n\n  const [\n    projectGroupData,\n    setProjectGroupData,\n    userData,\n    setUserData,\n    projectData,\n    setProjectData,\n    isLoaded,\n    setIsLoaded,\n  ] = useContext(ProjectDataContext);\n\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const tempProjectGroup = await callAPI(\n        `projectgroups/${associatedProjectGroupName}`,\n        'get',\n        idToken,\n        undefined\n      );\n      setProjectGroupData(tempProjectGroup);\n      console.log('STATE NOW ????', tempProjectGroup);\n      return tempProjectGroup;\n    } catch (err) {\n      console.error('useProjectData:error:', err);\n    }\n  };\n\n  const updateUserData = async (associatedProjectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const tempUser = await callAPI(\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\n        'get',\n        idToken,\n        undefined\n      );\n      setUserData(tempUser);\n      return tempUser;\n    } catch (err) {\n      console.error('useProjectData:updateUserData:error:', err);\n    }\n  };\n\n  const updateProjectData = async (projectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      setIsLoaded(false);\n      let tempProject = await callAPI(\n        'projects/projectgroups/' + projectGroupName,\n        'get',\n        idToken,\n        undefined\n      );\n      setProjectData(tempProject);\n      console.log('project array updated', tempProject);\n      setIsLoaded(true);\n      return tempProject;\n    } catch (err) {\n      console.error('useProjectData:updateProjectDataerror:', err);\n    }\n  };\n\n  /**\n   * Add one project to an existing projectGroupName !\n   * @param {*} projectGroupName\n   */\n  const addOneProject = async (projectGroupName) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const newProject = await callAPI('projects', 'post', idToken, {\n        projectGroupName,\n      });\n      //return await updateProjectData(projectGroupName);\n      return newProject;\n    } catch (err) {\n      console.error('useProjectData:addOneProject:error:', err);\n    }\n  };\n\n  const deleteOneProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const deletedProject = await callAPI(\n        'projects/' + project._id,\n        'DELETE',\n        idToken,\n        undefined\n      );\n      //return await updateProjectData(projectGroupName);\n      return deletedProject;\n    } catch (err) {\n      console.error('useProjectData:deleteOneProject:error:', err);\n    }\n  };\n\n  const addMemberToProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + project._id + '/member',\n        'POST',\n        idToken,\n        undefined\n      );\n\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:addMemberToProject:error:', err);\n    }\n  };\n\n  const deleteMemberFromProject = async (project) => {\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + project._id + '/member',\n        'DELETE',\n        idToken,\n        undefined\n      );\n\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\n    }\n  };\n\n  const updateProject = async (data, id) => {\n    console.log('project to be updated:', data);\n    try {\n      const idToken = await getAsyncIdToken(accounts, instance);\n      const projectUpdated = await callAPI(\n        'projects/' + id,\n        'PATCH',\n        idToken,\n        data\n      );\n\n      console.log('project updated:', projectUpdated);\n      return projectUpdated;\n    } catch (err) {\n      console.error('useProjectData:updateProject:error:', err);\n    }\n  };\n\n  return {\n    ...{\n      projectGroupData,\n      updateProjectGroupData,\n      userData,\n      updateUserData,\n      projectData,\n      updateProjectData,\n      addOneProject,\n      deleteOneProject,\n      addMemberToProject,\n      deleteMemberFromProject,\n      updateProject,\n      isLoaded,\n      setIsLoaded,\n    },\n  };\n};\n\nexport { ProjectDataProvider, useProjectData };\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\">\n      <div className=\"spinner__overlay\"></div>\n      <div className=\"spinner__animation\">\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState } from \"react\";\nimport { Link, useStaticQuery } from \"gatsby\";\nimport YoutubeImage from \"../image/youtube-image.js\";\nimport he from \"he\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faEdit,\n  faTrashAlt,\n  faUserPlus,\n  faUserTimes,\n  faSave,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { getNamesFromEmail } from \"../../utils/string/string\";\nimport { useProjectData } from \"../context/projects/project-data-context\";\nimport ContentEditable from \"../content-editable/content-editable.js\";\n\nconst ProjectCard = ({ project, setFilteredContents }) => {\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\n  const [isPublic, setIsPublic] = useState(project.isPublic);\n  const [projectUpdateState, setProjectUpdateState] = useState({});\n  // Get state management functions from the provider\n  const {\n    deleteOneProject,\n    updateProjectData,\n    addMemberToProject,\n    deleteMemberFromProject,\n    updateProject,\n    userData,\n    projectGroupData,\n    projectData,\n  } = useProjectData();\n  // Deal with events\n  const onProjectDelete = async () => {\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\n    await deleteOneProject(project);\n    await updateProjectData(project.projectGroupName);\n    setFilteredContents(undefined);\n  };\n\n  const onAddMemberToProject = async () => {\n    const updatedProject = await addMemberToProject(project);\n    console.log(\"onAddMemberToProject:\", updatedProject);\n    if (updateProjectData) {\n      await updateProjectData(project.projectGroupName);\n      setFilteredContents(undefined);\n    }\n  };\n\n  const onDeleteMemberFromProject = async () => {\n    const updatedProject = await deleteMemberFromProject(project);\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\n    if (updateProjectData) {\n      await updateProjectData(project.projectGroupName);\n      setFilteredContents(undefined);\n    }\n  };\n\n  const onProjectUpdateRequest = () => {\n    setIsBeingEdited(true);\n  };\n\n  const onQuitProjectUpdateRequest = () => {\n    setIsBeingEdited(false);\n    // clear the update state\n    setProjectUpdateState({});\n  };\n\n  const onProjectSave = async () => {\n    // save the updated state via the API\n    if (projectUpdateState) {\n      const updatedProject = await updateProject(\n        projectUpdateState,\n        project._id\n      );\n      // clear the project update state\n      setProjectUpdateState({});\n      setIsBeingEdited(false);\n      // re-render all projects\n      if (updatedProject) {\n        await updateProjectData(project.projectGroupName);\n        setFilteredContents(undefined);\n      }\n    }\n  };\n\n  // deal with modification of content\n  const handleChange = (propChanged) => {\n    // update the projectState\n    setProjectUpdateState((previousState) => {\n      return { ...previousState, ...propChanged };\n    });\n  };\n\n  const onSetPublic = (e) => {\n    setIsPublic(!isPublic);\n    setProjectUpdateState({\n      ...projectUpdateState,\n      ...{ isPublic: !isPublic },\n    });\n  };\n\n  console.log(\"projStateUpdated:\", projectUpdateState);\n\n  if (!project) return null;\n\n  return (\n    <div\n      className={\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\n      }\n      key={project.shortId}\n      id={project.shortId}\n    >\n      <div className=\"index__card__header\">\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\n        <ContentEditable\n          isBeingEdited={isBeingEdited}\n          id=\"name\"\n          onChange={handleChange}\n          startContent={project.name}\n          isInline\n        />\n      </div>\n\n      <div className=\"index__card__description\">\n        {\n          /* DELETE icon only if user isAdmin (admin or manager) */\n          userData.isAdmin && (\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\n          )\n        }\n\n        {\n          /* UPDATE PROJECT : visible only if \n          (user is Admin (admin or manager) OR\n          user is a member of this project AND \n          project group status is not \"end\" ) AND\n          project is not being edited\n          */\n          (userData.isAdmin ||\n            (project.projectMembers.includes(userData.userName) &&\n              projectGroupData.status !== \"end\")) &&\n          !isBeingEdited ? (\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\n          ) : (\n            \"\"\n          )\n        }\n\n        {\n          /* ADD MEMBER TO PROJECT : Visible only if :\n        project group status is \"init\" AND\n        userName has not already joined a project AND\n        number of members is < maximum number */\n          projectGroupData.status === \"init\" &&\n            !projectData.find((project) =>\n              project.projectMembers.includes(userData.userName)\n            ) &&\n            project.projectMembers.length <\n              projectGroupData.maximumProjectMembers && (\n              <FontAwesomeIcon\n                icon={faUserPlus}\n                onClick={onAddMemberToProject}\n              />\n            )\n        }\n        {\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\n        project group status is \"init\" AND\n        userName is already a member of this project\n        */\n          projectGroupData.status === \"init\" &&\n            project.projectMembers.includes(userData.userName) && (\n              <FontAwesomeIcon\n                icon={faUserTimes}\n                onClick={onDeleteMemberFromProject}\n              />\n            )\n        }\n        {\n          /*SAVE PROJECT : Visible only if :\n        project is being edited       \n        */\n          isBeingEdited && (\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\n          )\n        }\n\n        {\n          /*QUIT PROJECT UPDATE: Visible only if :\n        project is being edited       \n        */\n          isBeingEdited && (\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={onQuitProjectUpdateRequest}\n            />\n          )\n        }\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.description !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Description</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"description\"\n              startContent={project.description}\n              onChange={handleChange}\n            />\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.presentationUrl !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">\n              Vidéo de présentation\n            </div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"presentationUrl\"\n              startContent={project.presentationUrl}\n              onChange={handleChange}\n            >\n              <YoutubeImage src={project.presentationUrl} />\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.frontendProductionUrl !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">URL du site</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"frontendProductionUrl\"\n              startContent={project.frontendProductionUrl}\n              onChange={handleChange}\n            >\n              <a href={project.frontendProductionUrl} target=\"_blank\">\n                {project.frontendProductionUrl}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.frontendRepo !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Repo frontend</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"frontendRepo\"\n              startContent={project.frontendRepo}\n              onChange={handleChange}\n            >\n              <a href={project.frontendRepo} target=\"_blank\">\n                {project.frontendRepo}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.backendRepo !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Repo backend</div>\n            <ContentEditable\n              className=\"index__card__content__description\"\n              isBeingEdited={isBeingEdited}\n              id=\"backendRepo\"\n              startContent={project.backendRepo}\n              onChange={handleChange}\n            >\n              <a href={project.backendRepo} target=\"_blank\">\n                {project.backendRepo}\n              </a>\n            </ContentEditable>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      {/* Deal with project members */}\n      <div className=\"index__card__content\">\n        {project.projectMembers !== undefined &&\n        project.projectMembers.length > 0 ? (\n          <>\n            <div className=\"index__card__content__title\">Membres du projet</div>\n            <div className=\"index__card__content__description\">\n              {project.projectMembers\n                .map((member) => getNamesFromEmail(member))\n                .join(\", \")}\n            </div>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"index__card__content\">\n        {project.isPublic !== undefined ? (\n          <>\n            <div className=\"index__card__content__title\">Public ?</div>\n            <div className=\"index__card__content__description\">\n              <input\n                type=\"checkbox\"\n                checked={isPublic}\n                disabled={isBeingEdited ? false : true}\n                onClick={onSetPublic}\n              />\n            </div>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { Link, useStaticQuery } from \"gatsby\";\nimport YoutubeImage from \"../image/youtube-image.js\";\nimport ProjectCard from \"./project-card.js\";\nimport he from \"he\";\n\nconst ProjectsView = ({ projects , setFilteredContents}) => {\n  console.log(\"PROJECTSVIEW\", projects);\n  if (!projects || projects.length <= 0) return null;\n\n  return (\n    <>\n      {projects.map((project) => (\n        <ProjectCard {...{ project, setFilteredContents }} />\n      ))}\n    </>\n  );\n};\n\nexport default ProjectsView;\n","import React, { useState, useEffect } from \"react\";\nimport ProjectsView from \"./projects-view\";\nimport Spinner from \"../spinner/spinner\";\n\nimport { useProjectData } from \"../context/projects/project-data-context\";\n\nconst ProjectManagement = ({associatedProjectGroupName}) => {\n  // Get state from the provider\n  const {\n    projectGroupData,\n    updateProjectGroupData,\n    userData,\n    updateUserData,\n    isLoaded,\n    projectData,\n    addOneProject,\n    updateProjectData,\n  } = useProjectData();\n\n  const [filteredContents, setFilteredContents] = useState(undefined);\n  const [query, setQuery] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    // Get project data from Context\n    //const { projectData } = useProjectData();\n\n    const inputText = e.target.value;\n    setQuery(e.target.value);\n\n    console.log(\"handleInputChange::ProjectData\", projectData);\n    const filteredData = projectData.filter((content) => {\n      // destructure data from post frontmatter\n      const { shortId, name, description } = content;\n      return (\n        // standardize data with .toLowerCase()\n        // return true if the subject, skills...\n        // contains the query string\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\n        (inputText.length > 0 && parseInt(inputText) === shortId)\n      );\n    });\n\n    if (filteredData && filteredData.length > 0)\n      setFilteredContents(filteredData);\n    else setFilteredContents(undefined);\n  };\n\n  const onProjectAdd = async () => {\n    console.log(\"add and\", projectGroupData._id);\n    await addOneProject(projectGroupData._id);\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\n    setFilteredContents(undefined);\n  };\n\n  useEffect(() => {\n    // get data from APIs\n    getData();\n  }, []);\n\n  const getData = async () => {\n    try {\n      // Deal with project group data\n      const group = await updateProjectGroupData(associatedProjectGroupName);\n      // Deal with user role data {role:..., isAdmin:...}\n      const user = await updateUserData(associatedProjectGroupName);\n      // Deal with project data\n      const temp = await updateProjectData(group._id);\n    } catch (error) {\n      console.error(\"getData:error\", error);\n    }\n  };\n\n  return (\n    <>\n      {!isLoaded && <Spinner />}\n      {projectGroupData === undefined ? (\n        \"\"\n      ) : (\n        // deal with project view\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\n          <div className=\"index\">\n            <input\n              type=\"text\"\n              aria-label=\"Search\"\n              placeholder=\"Filtrez les contenus...\"\n              onChange={handleInputChange}\n              className=\"index__search\"\n            />\n            {filteredContents && filteredContents.length > 0 ? (\n              <ProjectsView\n                projects={filteredContents}\n                setFilteredContents={setFilteredContents}\n              ></ProjectsView>\n            ) : (\n              <ProjectsView\n                projects={projectData}\n                setFilteredContents={setFilteredContents}\n              ></ProjectsView>\n            )}\n          </div>\n\n          {/* // deal with add a project button */}\n          {userData === undefined || !userData.isAdmin ? (\n            \"\"\n          ) : (\n            <button className=\"index__button\" onClick={onProjectAdd}>\n              Ajouter projet\n            </button>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default ProjectManagement;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { useStaticQuery } from \"gatsby\";\n\nimport MainLayout from \"../components/main-layout\";\n\nimport { withAuthentication } from \"../components/hoc/hoc\";\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\n\nimport ProjectManagement from \"../components/projects/project-management\";\n\nconst ProjectPage = () => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            defaultAssociatedProjectGroupName\n          }\n        }\n      }\n    `\n  );\n\n  const associatedProjectGroupName =\n    data?.site.siteMetadata.defaultAssociatedProjectGroupName;\n\n  return (\n    <ProjectDataProvider>\n      <MainLayout>\n        <ProjectManagement\n          associatedProjectGroupName={associatedProjectGroupName}\n        />\n      </MainLayout>\n    </ProjectDataProvider>\n  );\n};\n\nconst ProjectPageProtected = withAuthentication(ProjectPage);\nexport default ProjectPageProtected;\n","// Helper function to call our API\n// using authorization bearer token scheme\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\n  let headers = new Headers();\n  let options = {};\n  options.method = method;\n\n  console.log(\"token :\", token);\n\n  if (token) {\n    const bearer = `Bearer ${token}`;\n    headers.append(\"Authorization\", bearer);\n  }\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  if (\n    method.toLowerCase() === \"post\" ||\n    method.toLowerCase() === \"patch\" ||\n    method.toLowerCase() === \"put\"\n  )\n    headers.append(\"Content-Type\", \"application/json\");\n  options.headers = headers;  \n  const url = process.env.GATSBY_API_URL + endpoint;\n  console.log(\n    \"request made to API at: \" + new Date().toString(),\n    \"URL:\",\n    url,\n    \"Options:\",\n    options\n  );\n  try {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      let fullErrorMessage =\n        \" Error code : \" +\n        response.status +\n        \" : \" +\n        response.statusText +\n        \"/nMessage : \";\n      const textResponse = await response.text();\n      fullErrorMessage += textResponse;\n      console.error(\"fetch() error\", fullErrorMessage);\n      // deal with token expiration\n      if (fullErrorMessage.search(\"expired\") > -1) {\n        console.log(\"token expired\");\n      }\n      throw new Error(fullErrorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.log(\"error:\", error);\n    throw error;\n  }\n}\n\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\n\nasync function getAsyncIdToken(accounts, instance) {\n  if (accounts.length > 0) {\n    const request = {\n      scopes: [\"openid\"],\n      account: accounts[0],\n    };\n\n    try {\n      const response = await instance.acquireTokenSilent(request);\n      return response.idToken;\n    } catch (error) {\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\n      if (error instanceof InteractionRequiredAuthError) {\n        const response2 = await instance.acquireTokenRedirect(request);\n        return response2.idToken;\n      }\n    }\n  }\n}\n\nexport { getAsyncIdToken };\n","const getNamesFromEmail = (email) => {\n  let names = email.substring(0, email.indexOf(\"@\"));\n  let firstname = names.substring(0, names.indexOf(\".\"));\n  let lastname = names.substring(names.indexOf(\".\") + 1);\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\n  // deal with cases where Extra info is added to the name, when there is a second dot\n  if (lastname.indexOf(\".\") >= 0) {\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\n  }\n  return firstname + \" \" + lastname;\n};\n\nexport { getNamesFromEmail };\n"],"names":["currentContent","allClasses","className","isBeingEdited","onChange","startContent","id","isInline","children","he","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","React","ProjectDataProvider","useState","undefined","projectGroupData","setProjectGroupData","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","useMsal","instance","accounts","useContext","updateProjectGroupData","associatedProjectGroupName","getAsyncIdToken","idToken","callAPI","tempProjectGroup","console","error","updateUserData","tempUser","updateProjectData","projectGroupName","tempProject","addOneProject","newProject","deleteOneProject","project","_id","deletedProject","addMemberToProject","projectUpdated","deleteMemberFromProject","updateProject","data","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","onProjectDelete","onAddMemberToProject","onDeleteMemberFromProject","onProjectSave","updatedProject","handleChange","propChanged","previousState","key","shortId","name","isAdmin","faTrashAlt","onClick","projectMembers","includes","userName","status","faEdit","find","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","faTimes","description","presentationUrl","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","filteredContents","setQuery","onProjectAdd","useEffect","getData","group","placeholder","inputText","filteredData","filter","content","toLowerCase","parseInt","withAuthentication","useStaticQuery","site","siteMetadata","defaultAssociatedProjectGroupName","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","fetch","response","ok","fullErrorMessage","statusText","text","textResponse","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","response2","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}