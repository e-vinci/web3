{"version":3,"file":"component---src-pages-project-page-js-f2511af9cbfcfbe32cf7.js","mappings":"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","sources":["webpack://myweb3course/./src/components/content-editable/content-editable.js","webpack://myweb3course/./src/components/context/projects/project-data-context.js","webpack://myweb3course/./src/components/spinner/spinner.js","webpack://myweb3course/./src/components/projects/project-card.js","webpack://myweb3course/./src/components/projects/projects-view.js","webpack://myweb3course/./src/components/projects/project-management.js","webpack://myweb3course/./src/pages/project-page.js","webpack://myweb3course/./src/utils/api/fetch.js","webpack://myweb3course/./src/utils/auths/use-id-token.js","webpack://myweb3course/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport he from 'he';\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  //const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited)\r\n    currentContent = startContent\r\n      ? he.decode(startContent)\r\n      : ''; \r\n  else if (children) currentContent = children;\r\n  else if (startContent)\r\n    currentContent = startContent ? he.decode(startContent) : '';\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : '';\r\n  if (isBeingEdited)\r\n    allClasses += ' index__card__content__description--is-being-edited';\r\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useContext, useState } from 'react';\r\nimport callAPI from '../../../utils/api/fetch';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\r\n\r\nconst ProjectDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n]);\r\n\r\nconst ProjectDataProvider = ({ children }) => {\r\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [projectData, setProjectData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ProjectDataContext.Provider\r\n      value={[\r\n        projectGroupData,\r\n        setProjectGroupData,\r\n        userData,\r\n        setUserData,\r\n        projectData,\r\n        setProjectData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ProjectDataContext.Provider>\r\n  );\r\n};\r\n\r\nconst useProjectData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    projectGroupData,\r\n    setProjectGroupData,\r\n    userData,\r\n    setUserData,\r\n    projectData,\r\n    setProjectData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ProjectDataContext);\r\n\r\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempProjectGroup = await callAPI(\r\n        `projectgroups/${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectGroupData(tempProjectGroup);\r\n      console.log('STATE NOW ????', tempProjectGroup);\r\n      return tempProjectGroup;\r\n    } catch (err) {\r\n      console.error('useProjectData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateUserData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempUser = await callAPI(\r\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setUserData(tempUser);\r\n      return tempUser;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateUserData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProjectData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      let tempProject = await callAPI(\r\n        'projects/projectgroups/' + projectGroupName,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectData(tempProject);\r\n      console.log('project array updated', tempProject);\r\n      setIsLoaded(true);\r\n      return tempProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProjectDataerror:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add one project to an existing projectGroupName !\r\n   * @param {*} projectGroupName\r\n   */\r\n  const addOneProject = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newProject = await callAPI('projects', 'post', idToken, {\r\n        projectGroupName,\r\n      });\r\n      //return await updateProjectData(projectGroupName);\r\n      return newProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:addOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteOneProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const deletedProject = await callAPI(\r\n        'projects/' + project._id,\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n      //return await updateProjectData(projectGroupName);\r\n      return deletedProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const addMemberToProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'POST',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:addMemberToProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteMemberFromProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (data, id) => {\r\n    console.log('project to be updated:', data);\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + id,\r\n        'PATCH',\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      console.log('project updated:', projectUpdated);\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProject:error:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      projectGroupData,\r\n      updateProjectGroupData,\r\n      userData,\r\n      updateUserData,\r\n      projectData,\r\n      updateProjectData,\r\n      addOneProject,\r\n      deleteOneProject,\r\n      addMemberToProject,\r\n      deleteMemberFromProject,\r\n      updateProject,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ProjectDataProvider, useProjectData };\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project AND\r\n        number of members is < maximum number */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) &&\r\n            project.projectMembers.length <\r\n              projectGroupData.maximumProjectMembers && (\r\n              <FontAwesomeIcon\r\n                icon={faUserPlus}\r\n                onClick={onAddMemberToProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProjectsView from \"./projects-view\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectManagement = ({associatedProjectGroupName}) => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log(\"handleInputChange::ProjectData\", projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    await addOneProject(projectGroupData._id);\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData(associatedProjectGroupName);\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData(associatedProjectGroupName);\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            \"\"\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { useStaticQuery } from \"gatsby\";\r\n\r\nimport MainLayout from \"../components/main-layout\";\r\n\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\n\r\nimport ProjectManagement from \"../components/projects/project-management\";\r\n\r\nconst ProjectPage = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            defaultAssociatedProjectGroupName\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const associatedProjectGroupName =\r\n    data?.site.siteMetadata.defaultAssociatedProjectGroupName;\r\n\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement\r\n          associatedProjectGroupName={associatedProjectGroupName}\r\n        />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n","// Helper function to call our API\r\n// using authorization bearer token scheme\r\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\r\n  let headers = new Headers();\r\n  let options = {};\r\n  options.method = method;\r\n\r\n  console.log(\"token :\", token);\r\n\r\n  if (token) {\r\n    const bearer = `Bearer ${token}`;\r\n    headers.append(\"Authorization\", bearer);\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  if (\r\n    method.toLowerCase() === \"post\" ||\r\n    method.toLowerCase() === \"patch\" ||\r\n    method.toLowerCase() === \"put\"\r\n  )\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  options.headers = headers;  \r\n  const url = process.env.GATSBY_API_URL + endpoint;\r\n  console.log(\r\n    \"request made to API at: \" + new Date().toString(),\r\n    \"URL:\",\r\n    url,\r\n    \"Options:\",\r\n    options\r\n  );\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (!response.ok) {\r\n      let fullErrorMessage =\r\n        \" Error code : \" +\r\n        response.status +\r\n        \" : \" +\r\n        response.statusText +\r\n        \"/nMessage : \";\r\n      const textResponse = await response.text();\r\n      fullErrorMessage += textResponse;\r\n      console.error(\"fetch() error\", fullErrorMessage);\r\n      // deal with token expiration\r\n      if (fullErrorMessage.search(\"expired\") > -1) {\r\n        console.log(\"token expired\");\r\n      }\r\n      throw new Error(fullErrorMessage);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\n\r\nasync function getAsyncIdToken(accounts, instance) {\r\n  if (accounts.length > 0) {\r\n    const request = {\r\n      scopes: [\"openid\"],\r\n      account: accounts[0],\r\n    };\r\n\r\n    try {\r\n      const response = await instance.acquireTokenSilent(request);\r\n      return response.idToken;\r\n    } catch (error) {\r\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        const response2 = await instance.acquireTokenRedirect(request);\r\n        return response2.idToken;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAsyncIdToken };\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"names":["currentContent","allClasses","className","isBeingEdited","onChange","startContent","id","isInline","children","he","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","React","ProjectDataProvider","useState","undefined","projectGroupData","setProjectGroupData","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","useMsal","instance","accounts","useContext","updateProjectGroupData","associatedProjectGroupName","getAsyncIdToken","idToken","callAPI","tempProjectGroup","console","error","updateUserData","tempUser","updateProjectData","projectGroupName","tempProject","addOneProject","newProject","deleteOneProject","project","_id","deletedProject","addMemberToProject","projectUpdated","deleteMemberFromProject","updateProject","data","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","onProjectDelete","onAddMemberToProject","onDeleteMemberFromProject","onProjectSave","updatedProject","handleChange","propChanged","previousState","key","shortId","name","isAdmin","faTrashAlt","onClick","projectMembers","includes","userName","status","faEdit","find","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","faTimes","description","presentationUrl","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","filteredContents","setQuery","onProjectAdd","useEffect","getData","group","placeholder","inputText","filteredData","filter","content","toLowerCase","parseInt","withAuthentication","useStaticQuery","site","siteMetadata","defaultAssociatedProjectGroupName","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","fetch","response","ok","fullErrorMessage","statusText","text","textResponse","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","response2","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}