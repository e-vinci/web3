{"version":3,"file":"component---src-pages-project-page-js-ff453a56fd025388d834.js","mappings":"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","sources":["webpack://myweb3course/./src/components/content-editable/content-editable.js","webpack://myweb3course/./src/components/context/projects/project-data-context.js","webpack://myweb3course/./src/components/spinner/spinner.js","webpack://myweb3course/./src/components/projects/project-card.js","webpack://myweb3course/./src/components/projects/projects-view.js","webpack://myweb3course/./src/components/projects/project-management.js","webpack://myweb3course/./src/pages/project-page.js","webpack://myweb3course/./src/utils/api/fetch.js","webpack://myweb3course/./src/utils/auths/use-id-token.js","webpack://myweb3course/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport he from 'he';\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  //const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited)\r\n    currentContent = startContent\r\n      ? he.decode(startContent)\r\n      : ''; \r\n  else if (children) currentContent = children;\r\n  else if (startContent)\r\n    currentContent = startContent ? he.decode(startContent) : '';\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : '';\r\n  if (isBeingEdited)\r\n    allClasses += ' index__card__content__description--is-being-edited';\r\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useContext, useState } from 'react';\r\nimport callAPI from '../../../utils/api/fetch';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\r\n\r\nconst ProjectDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n]);\r\n\r\nconst ProjectDataProvider = ({ children }) => {\r\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [projectData, setProjectData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ProjectDataContext.Provider\r\n      value={[\r\n        projectGroupData,\r\n        setProjectGroupData,\r\n        userData,\r\n        setUserData,\r\n        projectData,\r\n        setProjectData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ProjectDataContext.Provider>\r\n  );\r\n};\r\n\r\nconst useProjectData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    projectGroupData,\r\n    setProjectGroupData,\r\n    userData,\r\n    setUserData,\r\n    projectData,\r\n    setProjectData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ProjectDataContext);\r\n\r\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempProjectGroup = await callAPI(\r\n        `projectgroups/${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectGroupData(tempProjectGroup);\r\n      console.log('STATE NOW ????', tempProjectGroup);\r\n      return tempProjectGroup;\r\n    } catch (err) {\r\n      console.error('useProjectData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateUserData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempUser = await callAPI(\r\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setUserData(tempUser);\r\n      return tempUser;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateUserData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProjectData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      let tempProject = await callAPI(\r\n        'projects/projectgroups/' + projectGroupName,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectData(tempProject);\r\n      console.log('project array updated', tempProject);\r\n      setIsLoaded(true);\r\n      return tempProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProjectDataerror:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add one project to an existing projectGroupName !\r\n   * @param {*} projectGroupName\r\n   */\r\n  const addOneProject = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newProject = await callAPI('projects', 'post', idToken, {\r\n        projectGroupName,\r\n      });\r\n      //return await updateProjectData(projectGroupName);\r\n      return newProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:addOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteOneProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const deletedProject = await callAPI(\r\n        'projects/' + project._id,\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n      //return await updateProjectData(projectGroupName);\r\n      return deletedProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const addMemberToProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'POST',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:addMemberToProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteMemberFromProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (data, id) => {\r\n    console.log('project to be updated:', data);\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + id,\r\n        'PATCH',\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      console.log('project updated:', projectUpdated);\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProject:error:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      projectGroupData,\r\n      updateProjectGroupData,\r\n      userData,\r\n      updateUserData,\r\n      projectData,\r\n      updateProjectData,\r\n      addOneProject,\r\n      deleteOneProject,\r\n      addMemberToProject,\r\n      deleteMemberFromProject,\r\n      updateProject,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ProjectDataProvider, useProjectData };\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project AND\r\n        number of members is < maximum number */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) &&\r\n            project.projectMembers.length <\r\n              projectGroupData.maximumProjectMembers && (\r\n              <FontAwesomeIcon\r\n                icon={faUserPlus}\r\n                onClick={onAddMemberToProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProjectsView from \"./projects-view\";\r\nimport Spinner from \"../spinner/spinner\";\r\n\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\n\r\nconst ProjectManagement = ({associatedProjectGroupName}) => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log(\"handleInputChange::ProjectData\", projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log(\"add and\", projectGroupData._id);\r\n    await addOneProject(projectGroupData._id);\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData(associatedProjectGroupName);\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData(associatedProjectGroupName);\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error(\"getData:error\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        \"\"\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            \"\"\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { useStaticQuery } from \"gatsby\";\r\n\r\nimport MainLayout from \"../components/main-layout\";\r\n\r\nimport { withAuthentication } from \"../components/hoc/hoc\";\r\nimport { ProjectDataProvider } from \"../components/context/projects/project-data-context\";\r\n\r\nimport ProjectManagement from \"../components/projects/project-management\";\r\n\r\nconst ProjectPage = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            defaultAssociatedProjectGroupName\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const associatedProjectGroupName =\r\n    data?.site.siteMetadata.defaultAssociatedProjectGroupName;\r\n\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement\r\n          associatedProjectGroupName={associatedProjectGroupName}\r\n        />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n","// Helper function to call our API\r\n// using authorization bearer token scheme\r\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\r\n  let headers = new Headers();\r\n  let options = {};\r\n  options.method = method;\r\n\r\n  console.log(\"token :\", token);\r\n\r\n  if (token) {\r\n    const bearer = `Bearer ${token}`;\r\n    headers.append(\"Authorization\", bearer);\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  if (\r\n    method.toLowerCase() === \"post\" ||\r\n    method.toLowerCase() === \"patch\" ||\r\n    method.toLowerCase() === \"put\"\r\n  )\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  options.headers = headers;  \r\n  const url = process.env.GATSBY_API_URL + endpoint;\r\n  console.log(\r\n    \"request made to API at: \" + new Date().toString(),\r\n    \"URL:\",\r\n    url,\r\n    \"Options:\",\r\n    options\r\n  );\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (!response.ok) {\r\n      let fullErrorMessage =\r\n        \" Error code : \" +\r\n        response.status +\r\n        \" : \" +\r\n        response.statusText +\r\n        \"/nMessage : \";\r\n      const textResponse = await response.text();\r\n      fullErrorMessage += textResponse;\r\n      console.error(\"fetch() error\", fullErrorMessage);\r\n      // deal with token expiration\r\n      if (fullErrorMessage.search(\"expired\") > -1) {\r\n        console.log(\"token expired\");\r\n      }\r\n      throw new Error(fullErrorMessage);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\n\r\nasync function getAsyncIdToken(accounts, instance) {\r\n  if (accounts.length > 0) {\r\n    const request = {\r\n      scopes: [\"openid\"],\r\n      account: accounts[0],\r\n    };\r\n\r\n    try {\r\n      const response = await instance.acquireTokenSilent(request);\r\n      return response.idToken;\r\n    } catch (error) {\r\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        const response2 = await instance.acquireTokenRedirect(request);\r\n        return response2.idToken;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAsyncIdToken };\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"names":["_ref","className","isBeingEdited","onChange","startContent","id","isInline","children","currentContent","allClasses","he","React","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","ProjectDataProvider","projectGroupData","setProjectGroupData","useState","undefined","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","instance","accounts","useMsal","useContext","_objectSpread","updateProjectGroupData","async","idToken","getAsyncIdToken","tempProjectGroup","callAPI","associatedProjectGroupName","err","console","error","updateUserData","tempUser","updateProjectData","tempProject","projectGroupName","addOneProject","deleteOneProject","project","_id","addMemberToProject","deleteMemberFromProject","updateProject","data","Spinner","FontAwesomeIcon","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","handleChange","propChanged","previousState","key","shortId","ContentEditable","name","isAdmin","faTrashAlt","onClick","projectMembers","includes","userName","status","faEdit","onProjectUpdateRequest","find","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","updatedProject","faTimes","onQuitProjectUpdateRequest","description","presentationUrl","YoutubeImage","src","frontendProductionUrl","href","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","ProjectCard","filteredContents","query","setQuery","useEffect","getData","group","placeholder","inputText","filteredData","filter","content","toLowerCase","parseInt","ProjectsView","withAuthentication","ProjectPage","useStaticQuery","site","siteMetadata","defaultAssociatedProjectGroupName","MainLayout","ProjectManagement","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","response","fetch","ok","fullErrorMessage","statusText","text","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}