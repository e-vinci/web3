{"componentChunkName":"component---src-templates-mdx-pages-js","path":"/modules/2/","result":{"data":{"mdx":{"id":"51faa87d-ed39-5379-b688-fd714d64ba63","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Module 2 : React state\",\n  \"description\": \"React state\"\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar InternalPageMenu = makeShortcode(\"InternalPageMenu\");\nvar PathViewer = makeShortcode(\"PathViewer\");\nvar PathViewerItem = makeShortcode(\"PathViewerItem\");\nvar InternalPageMenuItem = makeShortcode(\"InternalPageMenuItem\");\nvar InternalPageTitle = makeShortcode(\"InternalPageTitle\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Module 2 : React state\"), mdx(\"p\", null, \"Ce module vous offre principalement la d\\xE9couverte de la gestion des \\xE9v\\xE9nements en React, ainsi que la gestion des \\xE9tats.\"), mdx(InternalPageMenu, {\n    mdxType: \"InternalPageMenu\"\n  }, mdx(PathViewer, {\n    mdxType: \"PathViewer\"\n  }, mdx(PathViewerItem, {\n    to: \"/\",\n    mdxType: \"PathViewerItem\"\n  }, \" web3course \"), mdx(PathViewerItem, {\n    to: \"/modules/2\",\n    selected: true,\n    mdxType: \"PathViewerItem\"\n  }, \" Module 2 \")), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Destructuring \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Gestion de l'\\xE9tat \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Gestionnaire d'\\xE9v\\xE9nements \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Exercice 2.1 : Destructing & composant stateful \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Exercice 2.2 : Composant de s\\xE9lection de couleur \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" \\uD83C\\uDF6C Exercice 2.3 : Votre premier Hook custom ! \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" A retenir \"), mdx(InternalPageMenuItem, {\n    mdxType: \"InternalPageMenuItem\"\n  }, \" Solution des exercices \")), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Destructuring  \")), mdx(\"p\", null, \"Nous souhaitons am\\xE9liorer la lisibilit\\xE9 de notre code et ne plus avoir \\xE0 taper \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.nomDeLaProps\"), \" au sein de nos composants React.\"), mdx(\"p\", null, \"Pour ce tutoriel, veuillez cr\\xE9er une copie de \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/web3-exercises/tree/main/tutorials/start-state-starter\"\n  }, \"start-state-starter\"), \", et l'appeler \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start-state\"), \". Changez le nom du projet dans \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \". Vous pouvez directement t\\xE9l\\xE9charger ce code via le site \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://download-directory.github.io/\"\n  }, \"https://download-directory.github.io/\"), \" et le lien \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/web3-exercises/tree/main/tutorials/start-state-starter\"\n  }, \"https://github.com/e-vinci/web3-exercises/tree/main/tutorials/start-state-starter\")), mdx(\"p\", null, \"Veuillez d\\xE9marrer l'application.\"), mdx(\"p\", null, \"Nous allons mettre \\xE0 jour le code.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Par exemple, nous pouvons simplifier ce composant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Header = (props) => {\\n  return (\\n    <header>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">{props.title}</h1>\\n      <h4>Version: {props.version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Une premi\\xE8re \\xE9tape, en utilisant le \\\"destructuring assignment\\\", serait :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"highlighting=\\\"2,5-6\\\"\",\n    \"highlighting\": \"\\\"2,5-6\\\"\"\n  }, \"const Header = (props) => {\\n  const { title, version } = props;\\n  return (\\n    <header>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">{title}</h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Mais nous pouvons faire le destructuring assignment directement dans le param\\xE8tre de la fonction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \" : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"highlighting=\\\"1,4-5\\\"\",\n    \"highlighting\": \"\\\"1,4-5\\\"\"\n  }, \"const Header = ({ title, version }) => {\\n  return (\\n    <header>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">{title}</h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Ainsi, nous avons un code plus concis et plus clair : on sait directement quelles props le composant attend et utilise.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uD83D\\uDC4D Dans la suite de ce cours, nous vous recommandons d'utiliser le destructuring assignment pour passer vos props. Cela rend le code plus lisible, on voit directement les param\\xE8tres attendus par la fonction.\"), mdx(\"p\", null, \"En plus de mettre \\xE0 jour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \", veuillez mettre \\xE0 jour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DrinkMenu\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"highlighting=\\\"1,4-5\\\"\",\n    \"highlighting\": \"\\\"1,4-5\\\"\"\n  }, \"const DrinkMenu = ({ title, children }) => {\\n  return (\\n    <div className=\\\"drink-menu\\\">\\n      <h4>{title}</h4>\\n      <div className=\\\"drink-items\\\">{children}</div>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Veuillez aussi mettre \\xE0 jour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DrinkCard\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"highlighting=\\\"1,4-6\\\"\",\n    \"highlighting\": \"\\\"1,4-6\\\"\"\n  }, \"const DrinkCard = ({ title, image, children }) => {\\n  return (\\n    <div className=\\\"drink-card\\\">\\n      <img src={image} alt={title} className=\\\"drink-image\\\" width=\\\"50\\\" />\\n      <h2>{title}</h2>\\n      <div className=\\\"drink-details\\\">{children}</div>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Gestion de l'\\xE9tat  \")), mdx(\"h2\", null, \"Comment g\\xE9rer l'affichage de nouvelles informations ?\"), mdx(\"p\", null, \"Jusque l\\xE0, toutes les UI que nous avons d\\xE9velopp\\xE9es ne changent pas d'apparence apr\\xE8s le premier rendu.\"), mdx(\"p\", null, \"N\\xE9anmoins, il y a plein de cas o\\xF9 nous souhaiterions avoir une UI qui se \\\"re-render\\\", se \\\"r\\xE9-affiche\\\", apr\\xE8s un \\xE9v\\xE9nement, tel qu'une action des utilisateurs ou un \\xE9v\\xE9nement temporel. \"), mdx(\"p\", null, \"Par exemple, nous souhaiterions que dans notre application, lorsqu'on clique sur le \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \", nous affichions un message au sein de ce \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \".\"), mdx(\"p\", null, \"Si nous faisions de la programmation \\\"old school\\\", que l'on appelle la \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"programmation \\\"imp\\xE9rative\\\"\"), \", nous devrions nous m\\xEAme :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"attacher des fonctions \\xE0 notre UI qui permettent de g\\xE9rer les \\xE9v\\xE9nements. Lors d'un clic par exemple, on devrait r\\xE9cup\\xE9rer une r\\xE9f\\xE9rence vers la repr\\xE9sentation m\\xE9moire du \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<header>\"), \";\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mettre \\xE0 jour le contenu HTML de cette repr\\xE9sentation, g\\xE9n\\xE9ralement via la propri\\xE9t\\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".innerHTML\"), \" de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<header>\"), \" en lui passant le message \\xE0 afficher (soit sous forme de string, soit en attachant un nouvel \\xE9l\\xE9ment m\\xE9moire correspondant au message).\\nLe browser se charge ensuite de r\\xE9afficher la page une fois la structure m\\xE9moire de la page mise \\xE0 jour par le JS/TS.\")), mdx(\"p\", null, \"Ici, comme nous utilisons React, nous faisons de la \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"programmation \\\"d\\xE9clarative\\\"\"), \". Nous d\\xE9clarons des UI (via des composants React), et si nous souhaitons rafra\\xEEchir les pages, nous devons :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d\\xE9clarer un \\xE9tat associ\\xE9 \\xE0 notre UI. L'\\xE9tat de notre application, c'est toutes les variables qui vont pouvoir amener \\xE0 un changement de notre UI.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"attacher notre UI \\xE0 des variables d'\\xE9tat.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"attacher des fonctions \\xE0 notre UI qui permettent de g\\xE9rer les \\xE9v\\xE9nements. Lors d'un event, ces fonctions doivent informer React qu'il y a eu un changement d'\\xE9tat.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"laisser la magie de l'outil (React ici) mettre \\xE0 jour toutes les parties de l'UI qui sont impact\\xE9es par le changement d'\\xE9tat : on parle de \\\"re-rendering\\\".\\nCes m\\xE9canismes permettent de bien simplifier et optimiser le rendering d'UI.\")), mdx(\"p\", null, \"Voyons ce que \\xE7a donne dans la pratique !\"), mdx(\"h2\", null, \"Composant stateful\"), mdx(\"p\", null, \"Un composant \\\"stateful\\\" est un composant qui a un \\xE9tat, c'est \\xE0 dire au moins une variable qui va permettre de rafra\\xEEchir l'UI.\"), mdx(\"p\", null, \"Pour notre tutoriel, nous allons cr\\xE9er la variable d'\\xE9tat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"messagePrinted\"), \" qui sera un bool\\xE9en permettant de savoir si l'on affiche ou pas le message cach\\xE9 du \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \". Nous allons aussi avoir une fonction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setMessagePrinted\"), \" pour changer la valeur du bool\\xE9en.\"), mdx(\"p\", null, \"Mettons \\xE0 jour le composant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \" (qui se trouve dans \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/src/components/Header/Header.tsx\"), \") :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"numbered highlighting=\\\"1,10,13,15\\\"\",\n    \"numbered\": true,\n    \"highlighting\": \"\\\"1,10,13,15\\\"\"\n  }, \"import { useState } from \\\"react\\\";\\nimport \\\"./Header.css\\\";\\n\\nconst Header = ({ title, version }) => {\\n  const [menuPrinted, setMenuPrinted] = useState(false);\\n\\n  return (\\n    <header onClick={() => setMenuPrinted(!menuPrinted)}>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">\\n        {menuPrinted ? `${title}... and rarely do we hate it!` : title}\\n      </h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\\nexport default Header;\\n\")), mdx(\"p\", null, \"D'abord, nous avons import\\xE9 le hook \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" de React, qui permet aux composants fonctionnels de g\\xE9rer leur \\xE9tat interne.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState(false)\"), \" initialise une variable d'\\xE9tat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"menuPrinted\"), \" avec une valeur initiale de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setMenuPrinted\"), \" est une fonction qui permet de mettre \\xE0 jour l'\\xE9tat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"menuPrinted\"), \". Elle est conventionnellement nomm\\xE9e avec \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set\"), \" suivi du nom de la variable d'\\xE9tat (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuPrinted\"), \" dans ce cas).\"), mdx(\"p\", null, \"Que fait ce morceau de code ? \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<header onClick={() => setMenuPrinted(!menuPrinted)}>\\n\")), mdx(\"p\", null, \"Cela attache un gestionnaire d'\\xE9v\\xE9nements \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" \\xE0 l'\\xE9l\\xE9ment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<header>\"), \".\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" s'attend \\xE0 recevoir une fonction ! Ici on lui a pass\\xE9 une \\\"function arrow\\\" qui ne prend aucun param\\xE8tre.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Lorsque le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"<header>\")), \" est cliqu\\xE9, la fonction bascule l'\\xE9tat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"menuPrinted\"), \" en appelant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setMenuPrinted(!menuPrinted)\"), \" : si \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"menuPrinted\"), \" est \\xE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", sa valeur est chang\\xE9e vers \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", et vice versa.\"), mdx(\"p\", null, \"La fonction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setMenuPrinted\"), \", qui permet de changer l'\\xE9tat, va informer React qu'il y a eu un changement d'\\xE9tat ! Et donc React va op\\xE9rer un re-render.\"), mdx(\"p\", null, \"Lorsqu'un composant React subit un re-render, seule la fonction de rendu (c'est-\\xE0-dire la fonction qui contient le \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return\"), \" et qui d\\xE9finit l'interface utilisateur du composant) est r\\xE9\\xE9valu\\xE9e.\"), mdx(\"p\", null, \"Finalement, lors du rerender, nous allons assurer un rendu conditionnel sur base de la variable d'\\xE9tat :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{menuPrinted ? `${title}... and rarely do we hate it!` : title}\\n\")), mdx(\"p\", null, \"Notons que nous avons utilis\\xE9 ici l'op\\xE9rateur ternaire :\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"condition ? valeurSiVraie : valeurSiFausse\")), mdx(\"p\", null, \"Cette op\\xE9rateur permet d'avoir du code plus concis. Si nous ne l'avions pas utilis\\xE9, nous aurions du \\xE9crire quelque chose du style :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Header = ({ title, version }) => {\\n  const [menuPrinted, setMenuPrinted] = useState(false);\\n\\n  if (!menuPrinted) {\\n    return (\\n      <header onClick={() => setMenuPrinted(!menuPrinted)}>\\n        <h1 className=\\\"animate__animated animate__bounce\\\">{title}</h1>\\n        <h4>Version: {version}</h4>\\n      </header>\\n    );\\n  }\\n\\n  return (\\n    <header onClick={() => setMenuPrinted(!menuPrinted)}>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">\\n        {`${title}... and rarely do we hate it!`}\\n      </h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Ce code ne respecte pas le principe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DRY\"), \" (Don't Repeat Yourself), est moins lisible et plus difficile \\xE0 maintenir.\"), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Gestionnaire d'\\xE9v\\xE9nements \")), mdx(\"p\", null, \"Un gestionnaire d'\\xE9v\\xE9nement est une fonction dont le but est de r\\xE9pondre \\xE0 cet \\xE9v\\xE9nement.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"highlighting=\\\"5\\\"\",\n    \"highlighting\": \"\\\"5\\\"\"\n  }, \"const Header = ({ title, version }) => {\\n  const [menuPrinted, setMenuPrinted] = useState(false);\\n\\n  return (\\n    <header onClick={() => setMenuPrinted(!menuPrinted)}>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">\\n        {menuPrinted ? `${title}... and rarely do we hate it!` : title}\\n      </h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Dans le code pr\\xE9c\\xE9dent nous avons utilis\\xE9 une arrow fonction anonyme et c\\u2019est ok lorsqu\\u2019il n\\u2019y a qu\\u2019une seule instruction courte dans la fonction.\\nLorsque la fonction contient plusieurs statements, il est pr\\xE9f\\xE9rable de cr\\xE9er une fonction nomm\\xE9e et la r\\xE9f\\xE9rencer comme handler de l\\u2019\\xE9v\\xE9nement.\\nEn voici un exemple \\xE0 reprendre dans votre tutoriel dans le composant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Header\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"numbered highlighting=\\\"4-7,10\\\"\",\n    \"numbered\": true,\n    \"highlighting\": \"\\\"4-7,10\\\"\"\n  }, \"const Header = ({ title, version }) => {\\n  const [menuPrinted, setMenuPrinted] = useState(false);\\n\\n  const handleClick = () => {\\n    console.log(`value of menuPrinted before click: ${menuPrinted}`);\\n    setMenuPrinted(!menuPrinted);\\n  }\\n\\n  return (\\n    <header onClick={handleClick}>\\n      <h1 className=\\\"animate__animated animate__bounce\\\">\\n        {menuPrinted ? `${title}... and rarely do we hate it!` : title}\\n      </h1>\\n      <h4>Version: {version}</h4>\\n    </header>\\n  );\\n};\\n\")), mdx(\"p\", null, \"Une fonction de gestion d'un \\xE9v\\xE9nement peut recevoir un unique argument (un objet repr\\xE9sentant l'\\xE9v\\xE9nement) et porte un nom qui commence par \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"handle\")), \" ou \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"on\")), \" afin de l'identifier facilement.\"), mdx(\"p\", null, \"\\u26A1\\uFE0F Attention, un attributs d'\\xE9v\\xE9nement (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \"...) doit recevoir le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nom\"), \" de la fonction de gestion de l'\\xE9v\\xE9nement et \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"non l'appel \\xE0 cette fonction\"), \" !\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Ceci est donc incorrect, sauf si \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleClick()\"), \" renvoie la fonction de gestion de l'\\xE9v\\xE9nement (son nom ne devrait alors pas commencer par \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handle\"), \" pour \\xE9viter toute confusion):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<header onClick={handleClick()}>\\n\")), mdx(\"p\", null, \"Ici cela veut aussi dire que d\\xE8s que le script est appel\\xE9, \\xE0 l'initialisation de l'application, on va automatiquement faire l'appel \\xE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleClick\"), \", bien qu'il n'y ait pas eu de clic...\"), mdx(\"p\", null, \"Allez-y, veuillez tester pour voir ce que cette erreur classique provoque...\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.\"), \" \\uD83D\\uDE31.\"), mdx(\"p\", null, \"\\uD83D\\uDCAD Veuillez prendre un moment, au niveau de la compr\\xE9hension de React, pour voir si vous savez expliquer pourquoi on va vers une boucle infinie.\"), mdx(\"p\", null, \"Si n\\xE9cessaire, vous pouvez trouver le code associ\\xE9 \\xE0 ce tutoriel ici : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/web3-exercises/tree/main/tutorials/start-state\"\n  }, \"start-state\"), \".\"), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Exercice 2.1 : Destructing & composant stateful \")), mdx(\"p\", null, \"Veuillez cr\\xE9er un nouveau projet nomm\\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/exercises/2.1\"), \" dans votre git repo.\"), mdx(\"p\", null, \"Par d\\xE9faut, le projet de base vous offre d\\xE9j\\xE0 un compteur de clic.\"), mdx(\"p\", null, \"Commencez par prendre quelques minutes pour comprendre ce code et externaliser le compteur de clics dans un composant stateful nomm\\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClickCounter\"), \". \"), mdx(\"p\", null, \"Une fois tout fonctionnel et le code compris, veuillez faire un commit avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.1-init\")), \".\"), mdx(\"p\", null, \"Veuillez ensuite mettre \\xE0 jour ce composant pour afficher :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"un titre qu'il re\\xE7oit en props. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"un message sous le nombre de clics \\xE0 afficher seulement \\xE0 partir de 10 clics. Ce message doit \\xEAtre pass\\xE9 en props. Vous passerez cette valeur pour votre application : \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"You are a master in the art of clicking !\\\"\"), \".\")), mdx(\"p\", null, \"Veuillez utiliser le \\\"destructing assignment\\\" comme vu dans le cours.\"), mdx(\"p\", null, \"Une fois tout fonctionnel, veuillez faire un commit avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.1-destructuring\")), \".\"), mdx(\"p\", null, \"Veuillez continuer votre application et ajouter deux gestionnaires d'\\xE9v\\xE9nements qui permettront : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lors du passage de la souris sur le compteur, d'afficher un message au dessus du comptage de clics. Notez que ce message doit aussi \\xEAtre pass\\xE9 en props \\xE0 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ClickCounter\"), \".\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Vous passerez cette valeur pour votre application : \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"Please click on me now !\\\"\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lorsque la souris quitte le compteur, ce message doit \\xEAtre enlev\\xE9.\")), mdx(\"p\", null, \"Une fois tout fonctionnel, veuillez faire un commit avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.1-events\")), \".\"), mdx(\"h4\", null, \"\\uD83E\\uDD1D Tips\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vous allez devoir g\\xE9rer une nouvelle variable d'\\xE9tat pour savoir si la souris est sur le compteur ou si la souris a quitt\\xE9 le compteur.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quels gestionnaires d'\\xE9v\\xE9nements ? Commencer \\xE0 taper \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"on\"), \" en propri\\xE9t\\xE9s de l'\\xE9l\\xE9ment sur lequel vous voulez \\xE9couter les passages de souris et vous verrez la liste de tous les \\xE9v\\xE9nements. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vous ne voyez toujours pas ? \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onMouseEnter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onMouseLeave\"), \" ; )\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"N'h\\xE9sitez pas \\xE0 utiliser tout ce qui existe d\\xE9j\\xE0 dans \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"index.css\"), \" concernant le button pour vous aider \\xE0 g\\xE9rer l'aspect visuel du compteur.\")), mdx(\"h2\", null, \"Sauvegarder le compteur\"), mdx(\"p\", null, \"Pour cet exercice, toujours dans \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/exercises/2.1\"), \", dans le composant \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClickCounter\"), \", appelez \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage.setItem(\\\"count\\\", JSON.stringify(count))\"), \" \\xE0 chaque fois qu'on change le compteur. Dans notre cas ici, c'est juste apr\\xE8s l'appel \\xE0 la m\\xE9thode \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount\"), \" (dans le gestionnaire d'\\xE9v\\xE9nements associ\\xE9s \\xE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \", nomm\\xE9 par exemple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleCount\"), \" si vous avez cr\\xE9\\xE9 une fonction nomm\\xE9e, ou dans une fonction arrow...).\"), mdx(\"p\", null, \"Ensuite, dans le \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState(0)\"), \", au lieu de donner \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0\"), \" comme valeur initiale au compteur, essayez de lire la valeur du compteur depuis le localStorage \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON.parse(localStorage.getItem(\\\"count\\\"))\"), \" et passez-la au \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" comme valeur par d\\xE9faut. Rafra\\xEEchissez votre page apr\\xE8s le changement du compteur, et constatez qu'il persiste.\"), mdx(\"p\", null, \"Vous remarquerez cependant qu'il y a un souci avec la valeur du compteur qui persiste. Il y a bien une persistance qui est faite, mais la valeur n'est pas correcte... Essayez de r\\xE9fl\\xE9chir \\xE0 la question, \\xE9ventuellement en lisant la documentation officielle de React sur le hook \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/hooks-state.html\"\n  }, \"Using the State Hook\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/web3/references/#r6\"\n  }, \"[R.6]\"), \" ou sur le Render des composants : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/rendering-elements.html\"\n  }, \"Rendering Elements\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/web3/references/#r5\"\n  }, \"[R.5]\"), \".\"), mdx(\"p\", null, \"Vous avez r\\xE9fl\\xE9chi \\xE0 la question ? V\\xE9rifiez ci-dessous si vous avez trouv\\xE9 la \\\"bonne\\\" r\\xE9ponse...\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"======= SPOILER =======\")), mdx(\"p\", null, \"Au cas ou vous ne l'auriez pas compris, lorsque l'\\xE9tat d\\xE9fini gr\\xE2ce au \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" vient \\xE0 changer, React re-render les composants qui sont impact\\xE9s par ce changement. La seule mani\\xE8re pour nous de changer la valeur du compteur, c'est d'utiliser le \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount()\"), \" que le \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" nous \\xE0 donn\\xE9. L'appeler en donnant une nouvelle valeur va relancer un render. Mais React ne fait pas un render \\xE0 chaque changement d'un \\xE9tat dans notre application. Il va optimiser les render pour \\xE9viter d'en faire \\xE0 tout bout de champ. Le render sera fait quant il veut, sans que vous sachiez exactement quand... Du coup, \\xE0 la ligne juste apr\\xE8s votre appel \\xE0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount\"), \", vous utilisez la valeur du counter en pensant qu'elle a \\xE9t\\xE9 chang\\xE9e, mais en fait, React ne la changera qu'au prochain render... Donc pas tout de suite ! Il faut donc trouver une petite parade ;-)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"======= FIN SPOILER =======\")), mdx(\"p\", null, \"Une fois que tout est en ordre, que le refresh n'alt\\xE8re en rien la valeur du compteur affich\\xE9e,\\nveuillez faire un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit\"), \" de votre code avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.1-stored\")), \".\"), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Exercice 2.2 : Composant de s\\xE9lection de couleur \")), mdx(\"p\", null, \"Veuillez cr\\xE9er un nouveau projet nomm\\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/exercises/2.2\"), \" dans votre git repo.\"), mdx(\"p\", null, \"Veuillez cr\\xE9er un composant React qui permette \\xE0 l'utilisateur de changer la couleur de fond d'une bo\\xEEte en cliquant sur un bouton.\"), mdx(\"p\", null, \"Au sein de la bo\\xEEte (une \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"div\")), \" par exemple) ayant une taille fixe, veuillez afficher un bouton contenant le nom de la prochaine couleur disponible. Apr\\xE8s chaque clic sur le bouton, la bo\\xEEte doit :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prendre la couleur qui \\xE9tait annonc\\xE9e. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"afficher un texte indiquant la couleur affich\\xE9e (sous le bouton).\")), mdx(\"p\", null, \"Veuillez pr\\xE9voir un cycle de 5 couleurs : rouge, vert, bleu, jaune, violet. Apr\\xE8s le violet, on revient au rouge. La premi\\xE8re couleur \\xE0 afficher, sans action de l'utilisateur, est le rouge (et donc un bouton avec comme texte : \\\"vert\\\" et un texte \\\"rouge\\\" au-dessous du bouton). \"), mdx(\"p\", null, \"Veuillez utiliser votre composant React dans votre application principale pour afficher 3 bo\\xEEte dont la couleur peut changer.\"), mdx(\"p\", null, \"Une fois tout fonctionnel, veuillez faire un commit avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.2\")), \".\"), mdx(\"h4\", null, \"\\uD83E\\uDD1D Tips\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plut\\xF4t que d'utiliser du CSS, vous pouvez utiliser des couleurs pr\\xE9d\\xE9finies dans React. Par exemple, pour le rouge, vous pouvez utiliser l'attribut \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"style={{ backgroundColor: 'red' }}\")), \".\")), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" \\uD83C\\uDF6C Exercice 2.3 : Votre premier Hook custom !  \")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ceci est un exercice facultatif, pour les plus motiv\\xE9s !\")), mdx(\"p\", null, \"Veuillez cr\\xE9er un nouveau projet nomm\\xE9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/exercises/2.3\"), \" dans votre git repo, sur base d'un copier/coller de votre projet \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/exercises/2.1\"), \".\"), mdx(\"p\", null, \"Vous aurez remarqu\\xE9 que le code de l'exercice 2.1 n'est pas tr\\xE8s propre... A chaque appel de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCounter()\"), \", il ne faudra surtout pas oublier d'\\xE9crire dans le localStorage... Et il faudra faire \\xE7a, pour chaque variable qu'on veut persister... Autant dire que c'est copier/coller du code partout, et le risque d'erreur est \\xE9norme...\"), mdx(\"p\", null, \"Et pourquoi ne pas faire notre propre \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"useState\")), \", mais qui \\xE9crit dans le localStorage au passage ?\"), mdx(\"p\", null, \"\\xC9crivez un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"src/hooks/useLocalStorage.js\")), \" (notez l'extension \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".js\")), \" et pas \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".jsx\")), \").\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Ce fichier doit d\\xE9clarer et exporter une fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"useLocalStorage(key, initialValue)\")), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Cette fonction utilisera en son coeur la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"useState\")), \" et comme elle, renverra une valeur et un setter. En plus de cela , elle stockera la valeur actuelle dans le localStorage \\xE0 l'indice de la clef donn\\xE9e et chargera la valeur stock\\xE9e initialement. Si la clef n'existe pas dans le localStorage, cette fonction initialisera la clef avec la valeur pass\\xE9e en second param\\xE8tre.\"), mdx(\"p\", null, \"Attention ! N'oubliez pas de cr\\xE9er \\\"l'alias\\\" pour le dossier hooks dans le fichier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vite.config.js\"), \" et le \\\"path\\\" dans le fichier \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsconfig.json\"), \".\"), mdx(\"p\", null, \"Une fois tout fonctionnel, veuillez faire un commit avec le message suivant : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"new:ex2.3\")), \".\"), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" A retenir \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"useState\")), \" permet de stocker un \\xE9tat et de \\\"rerender\\\" les composants automatiquement quand c'est n\\xE9cessaire.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Les \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"props\"), \" sont la principale mani\\xE8re de passer des donn\\xE9es ET des fonctions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Les fonctions de gestion d'\\xE9v\\xE9nements re\\xE7oivent un unique param\\xE8tre \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"e\")), \" qui repr\\xE9sente l'\\xE9v\\xE9nement. Elles portent un nom qui commence par \\\"handle\\\" ou \\\"on\\\" afin de les identifier facilement.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Les \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"hooks\"), \" sont des fonctions qui permettent d'ajouter des fonctionnalit\\xE9s \\xE0 un composant fonctionnel.\")), mdx(\"h1\", null, mdx(InternalPageTitle, {\n    mdxType: \"InternalPageTitle\"\n  }, \" Solution des exercices \")), mdx(\"p\", null, \"Une solution pour les exercices de ce module se trouvent ici : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/web3-exercises/tree/main/exercises/module2\"\n  }, \"module2\"), \".\"), mdx(\"p\", null, \"N'h\\xE9sitez pas \\xE0 utiliser \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://download-directory.github.io/\"\n  }, \"https://download-directory.github.io/\"), \" pour t\\xE9l\\xE9charger le dossier complet (sans devoir cloner tout le repo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"web3-exercises\")), \"). Vous devez juste indiquer le lien vers le dossier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"module2\")), \" dans le champ \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Download Directory\")), \" : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/web3-exercises/tree/main/exercises/module2\"\n  }, \"https://github.com/e-vinci/web3-exercises/tree/main/exercises/module2\"), \" puis taper sur la touche \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Enter\")), \" de votre clavier.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"modules/2.fr","frontmatter":{"title":"Module 2 : React state","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"React state","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web3/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/web3/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/web3/static/3df055edb9c0a06e37fec1309d96c61e/d8efd/autocompletion.png","srcSet":"/web3/static/3df055edb9c0a06e37fec1309d96c61e/d8efd/autocompletion.png 570w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/3df055edb9c0a06e37fec1309d96c61e/08f60/autocompletion.webp 570w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6964912280701754}},"base":"autocompletion.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web3/static/24dee9cafd76e7c25dc74141c33450b2/e53ce/propDrilling.png","srcSet":"/web3/static/24dee9cafd76e7c25dc74141c33450b2/c0a68/propDrilling.png 750w,\n/web3/static/24dee9cafd76e7c25dc74141c33450b2/8e03e/propDrilling.png 1080w,\n/web3/static/24dee9cafd76e7c25dc74141c33450b2/e53ce/propDrilling.png 1128w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/24dee9cafd76e7c25dc74141c33450b2/6e63e/propDrilling.webp 750w,\n/web3/static/24dee9cafd76e7c25dc74141c33450b2/fcd24/propDrilling.webp 1080w,\n/web3/static/24dee9cafd76e7c25dc74141c33450b2/9bf70/propDrilling.webp 1128w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7677304964539007}},"base":"propDrilling.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web3/static/1b27e491527e99eeac84485aef739cd3/7af5e/opinions.png","srcSet":"/web3/static/1b27e491527e99eeac84485aef739cd3/7af5e/opinions.png 363w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/1b27e491527e99eeac84485aef739cd3/f319a/opinions.webp 363w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.41597796143250687}},"base":"opinions.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web3/static/4ac56fca29eee6cf101be55d24c59b72/79afd/scores.png","srcSet":"/web3/static/4ac56fca29eee6cf101be55d24c59b72/79afd/scores.png 287w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/4ac56fca29eee6cf101be55d24c59b72/c6f03/scores.webp 287w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.494773519163763}},"base":"scores.png"}}]}},"pageContext":{"slug":"/modules/2/"}},"staticQueryHashes":["1696221415","3028011774","3458129946","493526238","501654901","575455071"]}