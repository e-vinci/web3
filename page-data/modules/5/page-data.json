{"componentChunkName":"component---src-templates-mdx-pages-js","path":"/modules/5/","result":{"data":{"mdx":{"id":"136a9eb6-56b7-54d4-8adf-3f3773fb449a","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Module 5 : Service web persistant via JSON et architectur√©\",\n  \"description\": \"Persistance des ressources via fichiers JSON & refactor du code d'une RESTful API\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ScrollableImage = makeShortcode(\"ScrollableImage\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Module 5 : Service web persistant via JSON et architectur\\xE9\"), mdx(\"p\", null, \"Ce module vous offre principalement la persistance des ressources via des fichiers JSON et le refactoring de web services afin de faciliter la maintenabilit\\xE9 et lisibilit\\xE9 du code.\"), mdx(\"p\", null, \"Voici les sujets trait\\xE9s :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#a\"\n  }, \"Introduction au JSON et persistance des donn\\xE9es\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a.1) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#a1\"\n  }, \"Introduction\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a.2) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#a2\"\n  }, \"Introduction au JSON\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a.3) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#a3\"\n  }, \"Communication de donn\\xE9es en JSON\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a.4) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#a4\"\n  }, \"Sauvegarde de donn\\xE9es JSON\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#b\"\n  }, \"Am\\xE9lioration des outils de d\\xE9veloppement\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b.1) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#b1\"\n  }, \"Introduction\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b.2) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#b2\"\n  }, \"Red\\xE9marrage automatique au changement d'un fichier\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b.3) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#b3\"\n  }, \"Debugging\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b.4) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#b4\"\n  }, \"Autres outils de d\\xE9veloppement\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"c) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#c\"\n  }, \"Exercice 5.1 : Persistance de la RESTfull API pour myMovies\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#d\"\n  }, \"Refactoring \\xE0 l'aide d'un \\\"fat model\\\"\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d.1) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#d1\"\n  }, \"Architectures possibles ?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d.2) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#d2\"\n  }, \"Architecture Express & \\\"fat model\\\"\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"e) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#e\"\n  }, \"Exercice 5.2 : Refactor de la RESTfull API pour myMovies\"))), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"a\"\n  }), \" a) Introduction au JSON et persistance des donn\\xE9es\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"a1\"\n  }), \" a.1) Introduction g\\xE9n\\xE9rale\"), mdx(\"p\", null, \"Au module 4, nous avons d\\xE9velopp\\xE9 notre premi\\xE8re RESTful API.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Nous avons implicitement d\\xE9couvert le JSON, notamment lorsque nous avons fait des requ\\xEAtes vers nos API.\"), mdx(\"p\", null, \"Nous allons maintenant voir ce que permet le JSON, notamment la cr\\xE9ation de fichiers permettant de sauvegarder des donn\\xE9es facilement en JS.\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"a2\"\n  }), \" a.2) Introduction au JSON\"), mdx(\"p\", null, \"JSON vient de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"J\"), \"ava\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \"cript \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\"), \"bject \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"N\"), \"otation.\"), mdx(\"p\", null, \"C'est une syntaxe pour \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\xE9changer\"), \" et \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"faire persister des donn\\xE9es\"), \".\"), mdx(\"p\", null, \"Du JSON, c'est du texte en notation JS.\"), mdx(\"p\", null, \"Voici les types de donn\\xE9es qui sont valides en JSON :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"null\")), mdx(\"p\", null, \"\\u26A1 Il n'y a donc pas de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"function\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"date\"), \" et \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"undefined\"), \".\"), mdx(\"p\", null, \"Voici un exemple de repr\\xE9sentations de donn\\xE9es en JSON qui correspond \\xE0 ce que tr\\xE8s souvent une API renvoie, un array d'objets :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"[\\n  {\\n    \\\"email\\\": \\\"raphael@voila.com\\\",\\n    \\\"fullname\\\": \\\"Raphael Baroni\\\"\\n  },\\n  {\\n    \\\"email\\\": \\\"jkj@herenqn.com\\\",\\n    \\\"fullname\\\": \\\"JK Roling\\\"\\n  },\\n  {\\n    \\\"email\\\": \\\"serena@gmail.com\\\",\\n    \\\"fullname\\\": \\\"Serena Here\\\"\\n  }\\n]\\n\")), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"a3\"\n  }), \" a.3) Communication de donn\\xE9es en JSON\"), mdx(\"h3\", null, \"a.3.1) S\\xE9rialisation d'objets JS vers du JSON\"), mdx(\"h4\", null, \"a.3.1.1) Envoi d'une application serveur vers un client\"), mdx(\"p\", null, \"Via Express, nous pouvons tr\\xE8s facilement convertir un objet JS en JSON afin de l'envoyer vers une application cliente gr\\xE2ce \\xE0 la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"res.json()\")), \".\"), mdx(\"p\", null, \"C'est ce que nous appelons de la s\\xE9rialisation de donn\\xE9es, nous passons du monde \\\"objets en m\\xE9moire\\\" vers du texte (ou des octets) qui vont voyager sur un r\\xE9seau.\"), mdx(\"p\", null, \"Le code actuel de notre RESTful API renvoyant un array de pizzas au format JSON est g\\xE9r\\xE9 automatiquement via :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"res.json(orderedMenu ?? MENU);\\n\")), mdx(\"p\", null, \"Lorsque l'API renvoie \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"MENU\")), \" avec les pizzas par d\\xE9faut, voici le JSON qui voyage sur le r\\xE9seau :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"[\\n  {\\n    \\\"id\\\": 1,\\n    \\\"title\\\": \\\"4 fromages\\\",\\n    \\\"content\\\": \\\"Gruy\\xE8re, S\\xE9rac, Appenzel, Gorgonzola, Tomates\\\"\\n  },\\n  {\\n    \\\"id\\\": 2,\\n    \\\"title\\\": \\\"Vegan\\\",\\n    \\\"content\\\": \\\"Tomates, Courgettes, Oignons, Aubergines, Poivrons\\\"\\n  },\\n  {\\n    \\\"id\\\": 3,\\n    \\\"title\\\": \\\"Vegetarian\\\",\\n    \\\"content\\\": \\\"Mozarella, Tomates, Oignons, Poivrons, Champignons, Olives\\\"\\n  },\\n  {\\n    \\\"id\\\": 4,\\n    \\\"title\\\": \\\"Alpage\\\",\\n    \\\"content\\\": \\\"Gruy\\xE8re, Mozarella, Lardons, Tomates\\\"\\n  },\\n  {\\n    \\\"id\\\": 5,\\n    \\\"title\\\": \\\"Diable\\\",\\n    \\\"content\\\": \\\"Tomates, Mozarella, Chorizo piquant, Jalapenos\\\"\\n  }\\n]\\n\")), mdx(\"p\", null, \"\\uD83D\\uDCAD La puissance du JSON peut d\\xE9j\\xE0 s'exprimer ici. Mais comment ?\"), mdx(\"p\", null, \"L'API renvoie un array d'objets, des pizzas, au format JSON, qui correspond en fait \\xE0 un format texte avec des conventions.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Il est donc possible \\xE0 n'importe quelle application cliente d'utiliser ces donn\\xE9es, quelque soit la technologie, le langage utilis\\xE9 pour d\\xE9velopper cette application cliente.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Ainsi, par exemple, une application Android, d\\xE9velopp\\xE9e en Java, pourrait consommer cette API pour afficher un menu de pizzas !\"), mdx(\"h4\", null, \"a.3.1.2) Envoi d'une application cliente vers un serveur\"), mdx(\"p\", null, \"Il est possible aussi, et nous le verrons plus tard en d\\xE9tails, de communiquer des donn\\xE9es d'une IHM vers une API.\"), mdx(\"p\", null, \"Nous avons d\\xE9j\\xE0 envoy\\xE9 du JSON \\xE0 une API via REST Client.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Voici la requ\\xEAte envoyant, dans son body, la repr\\xE9sentation JSON d'une ressource de type \\\"pizzas\\\" \\xE0 cr\\xE9er :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-http\"\n  }, \"### Create a pizza\\nPOST {{baseUrl}}/pizzas\\nContent-Type: application/json\\n\\n{\\n    \\\"title\\\":\\\"Magic Green\\\",\\n    \\\"content\\\":\\\"Epinards, Brocolis, Olives vertes, Basilic\\\"\\n}\\n\")), mdx(\"p\", null, \"Il est important de communiquer le \\\"media type\\\" (ou \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MIME\"), \") du corps de la requ\\xEAte : \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"application/json\\\"\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Cela indique \\xE0 l'application qui est la cible de la requ\\xEAte quelle genre d'outil elle devra utiliser pour d\\xE9coder les donn\\xE9es.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Par exemple, il faut faire un traitement diff\\xE9rent pour r\\xE9cup\\xE9rer des donn\\xE9es au format JSON que pour r\\xE9cup\\xE9rer des donn\\xE9es directement associ\\xE9es \\xE0 un fichier image.\"), mdx(\"p\", null, \"Si l'on consid\\xE8re une IHM, il sera utile plus tard d'avoir un formulaire permettant d'ajouter des pizzas.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Le JS associ\\xE9 \\xE0 l'IHM permettra d'envoyer les donn\\xE9es du formulaire au format JSON, via la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"fetch\")), \", vers notre RESTful API g\\xE9rant les ressources de type pizzas.\"), mdx(\"p\", null, \"Voici un exemple de code que vous ne devez pas encore comprendre :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const options = {\\n  method: 'POST',\\n  body: JSON.stringify({\\n    title: title.value,\\n    content: content.value,\\n  }),\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n};\\n\\nconst response = await fetch('/api/pizzas', options);\\nconst pizza = await response.json();\\n\")), mdx(\"h3\", null, \"a.3.2) Parsing de donn\\xE9es JSON vers un objet JS\"), mdx(\"h4\", null, \"a.3.2.1) R\\xE9ception par une application serveur\"), mdx(\"p\", null, \"Via Express, nous pouvons tr\\xE8s facilement convertir du JSON vers un objet JS \\xE0 l'aide du middleware \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"express.json()\")), \".\"), mdx(\"p\", null, \"C'est ce que nous appelons du parsing de donn\\xE9es, ou de la d\\xE9s\\xE9rialisation, c'est quand nous passons du monde texte / JSON (ou des octets) vers des \\\"objets en m\\xE9moire\\\".\"), mdx(\"p\", null, \"Le code actuel de notre RESTful API r\\xE9cup\\xE9rant les donn\\xE9es d'une pizza \\xE0 cr\\xE9er est tr\\xE8s simple :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\\nconst content = req?.body?.content?.length !== 0 ? req.body.content : undefined;\\n\")), mdx(\"p\", null, \"Automatiquement gr\\xE2ce \\xE0 Express et au middleware appel\\xE9 dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"apps.js\"), \" (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"app.use(express.json());\")), \"), \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"req.body\")), \" contient un objet JS repr\\xE9sentant toutes les donn\\xE9es JSON qui \\xE9taient pr\\xE9sentes dans le body de la requ\\xEAte cliente, comme par exemple :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-http\",\n    \"metastring\": \"{5-8}\",\n    \"{5-8}\": true\n  }, \"### Create a pizza\\nPOST {{baseUrl}}/pizzas\\nContent-Type: application/json\\n\\n{\\n    \\\"title\\\":\\\"Magic Green\\\",\\n    \\\"content\\\":\\\"Epinards, Brocolis, Olives vertes, Basilic\\\"\\n}\\n\")), mdx(\"h4\", null, \"a.3.2.2) R\\xE9ception par une application cliente\"), mdx(\"p\", null, \"Plus tard, nous verrons comment une IHM peut utiliser les donn\\xE9es envoy\\xE9es par une API.\"), mdx(\"p\", null, \"La m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"fetch\")), \" en collaboration avec la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"json\")), \" sur la r\\xE9ponse d'une API permet de r\\xE9cup\\xE9rer et parser des donn\\xE9es JSON vers un objet JS.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Par exemple, cette requ\\xEAte de cr\\xE9ation d'une pizza parse la ressource qui a \\xE9t\\xE9 rajout\\xE9e c\\xF4t\\xE9 API au sein de la variable \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"pizza\")), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{13}\",\n    \"{13}\": true\n  }, \"const options = {\\n  method: 'POST',\\n  body: JSON.stringify({\\n    title: title.value,\\n    content: content.value,\\n  }),\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n};\\n\\nconst response = await fetch('/api/pizzas', options);\\nconst pizza = await response.json();\\n\")), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"a4\"\n  }), \" a.4) Sauvegarde de donn\\xE9es JSON\"), mdx(\"h3\", null, \"a.4.1) S\\xE9rialisation d'objets JS vers du JSON\"), mdx(\"h4\", null, \"a.4.1.1) Application c\\xF4t\\xE9 serveur\"), mdx(\"p\", null, \"La fonction JS \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"JSON.stringify(objectToSerialised)\")), \" permet de cr\\xE9er une \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \" contenant la repr\\xE9sentation JSON de l'objet \\xE0 s\\xE9rialiser.\"), mdx(\"p\", null, \"C\\xF4t\\xE9 serveur, il est ensuite facile de sauvegarder les donn\\xE9es JSON au sein d'un fichier.\"), mdx(\"p\", null, \"Voici un exemple de code, une fonction, permettant \\xE0 une application Express de sauvegarder au format JSON un objet dans un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".json\"), \" dont son chemin et nom complet sont indiqu\\xE9s dans le param\\xE8tre \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filePath\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/**\\n * Serialize the content of an Object within a file\\n * @param {String} filePath - path to the .json file\\n * @param {Array} object - Object to be written within the .json file.\\n * Even if the file exists, its whole content is reset by the given object.\\n */\\nfunction serialize(filePath, object) {\\n  const objectSerialized = JSON.stringify(object);\\n  fs.writeFileSync(filePath, objectSerialized);\\n}\\n\")), mdx(\"p\", null, \"Imaginez que, au sein du router traitant des ressources de type \\\"pizzas\\\", vous passiez la valeur suivante \\xE0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filePath\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const jsonDbPath = __dirname + '/../data/pizzas.json';\\nserialize(jsonDbPath, MENU);\\n\")), mdx(\"p\", null, \"Cela signifie que dans le projet contenant notre API, nous allons sauvegarder le menu des pizzas au format JSON dans le fichier JSON \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data/pizzas.json\"), \".\"), mdx(\"p\", null, \"Ce fichier est en fait une base de donn\\xE9es simplifi\\xE9e !\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Nous allons prochainement voir comment r\\xE9cup\\xE9rer ces donn\\xE9es au sein d'un array.\"), mdx(\"p\", null, \"Nous allons maintenant r\\xE9aliser un tutoriel pour rendre persistant les ressources de type \\\"pizzas\\\".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Nous allons repartir de l'API cr\\xE9\\xE9e au module 4.\"), mdx(\"p\", null, \"Dans votre repo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \", veuillez copier / coller le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/tutorials/pizzeria/api/basic\"), \" et le renommer en \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/tutorials/pizzeria/api/persistence\"), \".\"), mdx(\"p\", null, \"En cas de souci, vous pouvez t\\xE9l\\xE9charger le code du tutoriel pr\\xE9c\\xE9dent ici : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/basic\"\n  }, \"api-basic\"), \".\"), mdx(\"p\", null, \"Veuillez ouvrir un terminal au niveau de ce r\\xE9pertoire.\"), mdx(\"p\", null, \"Pour la suite du tutoriel, nous consid\\xE9rons que tous les chemins absolus d\\xE9marrent du r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/tutorials/pizzeria/api/persistence\"), \" (ou \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/web2/tutorials/pizzeria/api/persistence\"), \" si l'on consid\\xE8re le nom du r\\xE9pertoire du repo).\"), mdx(\"p\", null, \"Veuillez cr\\xE9er un nouveau r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/utils\"), \". Au sein de ce r\\xE9pertoire, veuillez cr\\xE9er le module \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/utils/json.js\"), \" dans lequel vous allez ajouter ces fonctions :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs');\\n\\n/**\\n * Parse items given in a .json file\\n * @param {String} filePath - path to the .json file\\n * If the file does not exist or it's content cannot be parsed as JSON data,\\n * use the default data.\\n * @param {Array} defaultArray - Content to be used when the .json file does not exists\\n * @returns {Array} : the array that was parsed from the file (or defaultArray)\\n */\\nfunction parse(filePath, defaultArray = []) {\\n  if (!fs.existsSync(filePath)) return defaultArray;\\n  const fileData = fs.readFileSync(filePath);\\n  try {\\n    // parse() Throws a SyntaxError exception if the string to parse is not valid JSON.\\n    return JSON.parse(fileData);\\n  } catch (err) {\\n    return defaultArray;\\n  }\\n}\\n\\n/**\\n * Serialize the content of an Object within a file\\n * @param {String} filePath - path to the .json file\\n * @param {Array} object - Object to be written within the .json file.\\n * Even if the file exists, its whole content is reset by the given object.\\n */\\nfunction serialize(filePath, object) {\\n  const objectSerialized = JSON.stringify(object);\\n  createPotentialLastDirectory(filePath);\\n  fs.writeFileSync(filePath, objectSerialized);\\n}\\n\\n/**\\n *\\n * @param {String} filePath - path to the .json file\\n */\\nfunction createPotentialLastDirectory(filePath) {\\n  const pathToLastDirectory = filePath.substring(0, filePath.lastIndexOf('/'));\\n\\n  if (fs.existsSync(pathToLastDirectory)) return;\\n\\n  fs.mkdirSync(pathToLastDirectory);\\n}\\n\\nmodule.exports = { parse, serialize };\\n\")), mdx(\"p\", null, \"L'op\\xE9ration de s\\xE9rialisation des donn\\xE9es est faite via la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"serialize\"), \" de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/utils/json.js\"), \". Pour se simplifier la vie et ne pas obliger les d\\xE9veloppeurs \\xE0 devoir cr\\xE9er manuellement un r\\xE9pertoire qui contiendra la mini DB de pizzas (le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pizzas.json\"), \" dans la suite de l'exemple), une fonction a \\xE9t\\xE9 cr\\xE9\\xE9e qui s'appelle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createPotentialLastDirectory\"), \".La fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"serialize\"), \" fait appel \\xE0 cette fonction qui va, si n\\xE9cessaire, cr\\xE9er le dernier r\\xE9pertoire donn\\xE9 dans le chemin vers le fichier JSON (le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data\"), \" dans la suite de l'exemple).\"), mdx(\"p\", null, \"Il n'est pas int\\xE9ressant de retenir par coeur le code donn\\xE9 dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/utils/json.js\"), \". Par contre, il est important que vous compreniez celui-ci, ce qu'il fait.\"), mdx(\"p\", null, \"A pr\\xE9sent, nous allons convertir le code du router de \\\"pizzas\\\" pour rendre persistant les donn\\xE9es.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Voici ce que nous devons faire pour les op\\xE9rations de :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"lecture de ressources\"), \" : il suffit de faire appel \\xE0 la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"parse\")), \" qui tentera de charger les ressources qui devraient se trouver dans le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data/pizzas.json\"), \". Notons que le chemin vers ce fichier JSON est un simple choix, il doit \\xEAtre configurable.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\xE9criture de ressources\"), \" : lors d'une op\\xE9ration d'\\xE9criture pour cr\\xE9er une nouvelle ressource, ou pour mettre \\xE0 jour une ressource existante, voici les \\xE9tapes :\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cr\\xE9ation d'une liste de toutes les pizzas dans un array : cela correspond \\xE0 l'utilisation de la fonction \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"parse\")), \" pour tenter de charger ce qui est contenu dans la mini DB de pizzas.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mise \\xE0 jour de l'array soit en ajoutant un nouvel objet (une pizza), soit en modifiant un objet existant, soit en supprimant un objet.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"r\\xE9\\xE9criture compl\\xE8te du fichier JSON contenant la liste de pizzas sur base de l'array de pizzas qui a pr\\xE9c\\xE9demment \\xE9t\\xE9 mis \\xE0 jour via la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"serialize\")), \".\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Voici le code du router mis \\xE0 jour afin de g\\xE9rer la persistance selon la strat\\xE9gie d\\xE9finie ci-dessus, les modifications \\xE9tant surlign\\xE9es :\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"numbered {2,5,45,47,51,58,60,64,76-78,87,89,98,100,104,107,123,125,129,131,133}\",\n    \"numbered\": true,\n    \"{2,5,45,47,51,58,60,64,76-78,87,89,98,100,104,107,123,125,129,131,133}\": true\n  }, \"var express = require('express');\\nconst { serialize, parse } = require('../utils/json');\\nvar router = express.Router();\\n\\nconst jsonDbPath = __dirname + '/../data/pizzas.json';\\n\\nconst MENU = [\\n  {\\n    id: 1,\\n    title: '4 fromages',\\n    content: 'Gruy\\xE8re, S\\xE9rac, Appenzel, Gorgonzola, Tomates',\\n  },\\n  {\\n    id: 2,\\n    title: 'Vegan',\\n    content: 'Tomates, Courgettes, Oignons, Aubergines, Poivrons',\\n  },\\n  {\\n    id: 3,\\n    title: 'Vegetarian',\\n    content: 'Mozarella, Tomates, Oignons, Poivrons, Champignons, Olives',\\n  },\\n  {\\n    id: 4,\\n    title: 'Alpage',\\n    content: 'Gruy\\xE8re, Mozarella, Lardons, Tomates',\\n  },\\n  {\\n    id: 5,\\n    title: 'Diable',\\n    content: 'Tomates, Mozarella, Chorizo piquant, Jalapenos',\\n  },\\n];\\n\\n/* Read all the pizzas from the menu\\n   GET /pizzas?order=title\\xA0:\\xA0ascending order\\xA0by\\xA0title\\n\\xA0  GET /pizzas?order=-title\\xA0:\\xA0descending order\\xA0by\\xA0title\\n*/\\nrouter.get('/', (req, res, next) => {\\n  const orderByTitle =\\n    req?.query?.order?.includes('title') ? req.query.order : undefined;\\n  let orderedMenu;\\n  console.log(`order by ${orderByTitle ?? 'not requested'}`);\\n\\n  const pizzas = parse(jsonDbPath, MENU);\\n  \\n  if (orderByTitle) orderedMenu = [...pizzas].sort((a, b) => a.title.localeCompare(b.title));\\n  if (orderByTitle === '-title') orderedMenu = orderedMenu.reverse();\\n\\n  console.log('GET /pizzas');\\n  return res.json(orderedMenu ?? pizzas);\\n});\\n\\n// Read the pizza identified by an id in the menu\\nrouter.get('/:id', (req, res) => {\\n  console.log(`GET /pizzas/${req.params.id}`);\\n\\n  const pizzas = parse(jsonDbPath, MENU);\\n\\n  const indexOfPizzaFound = pizzas.findIndex(pizza => pizza.id == req.params.id);\\n\\n  if (indexOfPizzaFound < 0) return res.sendStatus(404);\\n\\n  return res.json(pizzas[indexOfPizzaFound]);\\n});\\n\\n// Create a pizza to be added to the menu.\\nrouter.post('/', (req, res) => {\\n  const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\\n  const content = req?.body?.content?.length !== 0 ? req.body.content : undefined;\\n\\n  console.log('POST /pizzas');\\n\\n  if (!title || !content) return res.sendStatus(400); // error code '400 Bad request'\\n\\n  const pizzas = parse(jsonDbPath, MENU);\\n  const lastItemIndex = pizzas?.length !== 0 ? pizzas.length - 1 : undefined;\\n  const lastId = lastItemIndex ? pizzas[lastItemIndex]?.id : undefined;\\n  const nextId = lastItemIndex !== 0 ? lastId + 1 : 1;\\n\\n  const newPizza = {\\n    id: nextId,\\n    title: title,\\n    content: content,\\n  };\\n\\n  pizzas.push(newPizza);\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return res.json(newPizza);\\n});\\n\\n// Delete a pizza from the menu based on its id\\nrouter.delete('/:id', (req, res) => {\\n  console.log(`DELETE /pizzas/${req.params.id}`);\\n\\n  const pizzas = parse(jsonDbPath, MENU);\\n\\n  const foundIndex = pizzas.findIndex(pizza => pizza.id == req.params.id);\\n\\n  if (foundIndex < 0) return res.sendStatus(404);\\n\\n  const itemsRemovedFromMenu = pizzas.splice(foundIndex, 1);\\n  const itemRemoved = itemsRemovedFromMenu[0];\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return res.json(itemRemoved);\\n});\\n\\n// Update a pizza based on its id and new values for its parameters\\nrouter.patch('/:id', (req, res) => {\\n  console.log(`PATCH /pizzas/${req.params.id}`);\\n\\n  const title = req?.body?.title;\\n  const content = req?.body?.content;\\n\\n  console.log('POST /pizzas');\\n\\n  if ((!title && !content) || title?.length === 0 || content?.length === 0) return res.sendStatus(400);\\n\\n  const pizzas = parse(jsonDbPath, MENU);\\n\\n  const foundIndex = pizzas.findIndex(pizza => pizza.id == req.params.id);\\n\\n  if (foundIndex < 0) return res.sendStatus(404);\\n\\n  const updatedPizza = {...pizzas[foundIndex], ...req.body};\\n\\n  pizzas[foundIndex] = updatedPizza;\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return res.json(updatedPizza);\\n});\\n\\nmodule.exports = router;\\n\")), mdx(\"p\", null, \"Veuillez mettre \\xE0 jour votre fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/router/pizzas.js\"), \" sur base du code donn\\xE9 et testez le bon fonctionnement de l'application. Faites quelques requ\\xEAtes pour ajouter et modifier des donn\\xE9es et v\\xE9rifiez, une fois que vous red\\xE9marrer votre application, que les donn\\xE9es persistent.\"), mdx(\"h4\", null, \"a.4.1.2) Application c\\xF4t\\xE9 client\"), mdx(\"p\", null, \"Au niveau d'une IHM, il doit aussi \\xEAtre possible de sauvegarder des informations.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Or, pour des raisons de s\\xE9curit\\xE9, le browser ne peut pas cr\\xE9er des fichiers JSON de mani\\xE8re transparente \\xE0 l'utilisateur.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Afin de sauvegarder des donn\\xE9es, le browser met n\\xE9anmoins \\xE0 disposition un web storage dans lequel on peut sauvegarder des donn\\xE9es sous forme de cl\\xE9 / valeur, au format texte.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Nous verrons cela plus tard en d\\xE9tails.\"), mdx(\"p\", null, \"Voici d\\xE9j\\xE0 malgr\\xE9 tout un exemple de code, une fonction, permettant de sauvegarder les donn\\xE9es de session d'un utilisateur dans le web storage d'un browser :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const setUserSessionData = (user) => {\\n  const storageValue = JSON.stringify(user);\\n  localStorage.setItem(STORE_NAME, storageValue);\\n};\\n\")), mdx(\"h3\", null, \"a.4.2) Parsing de donn\\xE9es JSON vers un objet JS\"), mdx(\"h4\", null, \"a.4.2.1) Application c\\xF4t\\xE9 serveur\"), mdx(\"p\", null, \"La fonction JS \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"JSON.parse(objectSerialized) \")), \" permet de cr\\xE9er un objet JS \\xE0 partir d'une \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \" contenant des donn\\xE9es au format JSON.\"), mdx(\"p\", null, \"C\\xF4t\\xE9 serveur, il est ensuite facile de sauvegarder les donn\\xE9es JSON au sein d'un fichier.\"), mdx(\"p\", null, \"Voici un exemple de code, une fonction, permettant \\xE0 une application Express de cr\\xE9er un objet JS sur base de donn\\xE9es JSON se trouvant dans un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".json\"), \" dont le chemin et nom complet sont indiqu\\xE9s dans le param\\xE8tre \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filePath\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/**\\n * Parse items given in a .json file\\n * @param {String} filePath - path to the .json file\\n * If the file does not exist or it's content cannot be parsed as JSON data,\\n * use the default data.\\n * @param {Array} defaultArray - Content to be used when the .json file does not exists\\n * @returns {Array} : the array that was parsed from the file (or defaultData)\\n */\\nfunction parse(filePath, defaultArray = []) {\\n  if (!fs.existsSync(filePath)) return defaultArray;\\n  const fileData = fs.readFileSync(filePath);\\n  try {\\n    // parse() Throws a SyntaxError exception if the string to parse is not valid JSON.\\n    return JSON.parse(fileData);\\n  } catch (err) {\\n    return defaultArray;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Imaginez que, au sein du router traitant des ressources de type \\\"pizzas\\\", que l'on r\\xE9cup\\xE8re le menu des pizzas \\xE0 l'aide du fichier JSON dont le chemin et nom complet est donn\\xE9 dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"jsonDbPath\"), \". Voici ce que donnerait l'op\\xE9ration de lecture de toutes les pizzas :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Read all the pizzas from the menu\\nrouter.get('/', function (req, res) {\\n  console.log('GET /pizzas');\\n  const pizzas = parse(jsonDbPath, DEFAULT_MENU);\\n  res.json(pizzas);\\n});\\n\")), mdx(\"h4\", null, \"a.4.2.2) Application c\\xF4t\\xE9 client\"), mdx(\"p\", null, \"Au niveau d'une IHM, il doit aussi \\xEAtre possible de r\\xE9cup\\xE9rer des donn\\xE9es JSON qui auraient \\xE9t\\xE9 sauvegard\\xE9es au sein du web browser.\"), mdx(\"p\", null, \"Nous verrons cela plus tard en d\\xE9tails. Voici d\\xE9j\\xE0 malgr\\xE9 tout un exemple de code, une fonction, permettant de parser les donn\\xE9es de session d'un utilisateur se trouvant dans le web storage d'un browser :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const getUserSessionData = () => {\\n  const retrievedUser = localStorage.getItem(STORE_NAME);\\n  if (!retrievedUser) return;\\n  return JSON.parse(retrievedUser);\\n};\\n\")), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"b\"\n  }), \" b) Am\\xE9lioration des outils de d\\xE9veloppement\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"b1\"\n  }), \" b.1) Introduction\"), mdx(\"p\", null, \"Dans le d\\xE9veloppement de nos API, nous souhaitons plus de facilit\\xE9s.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Notamment, \\xE0 chaque changement de notre code, nous ne souhaitons pas devoir red\\xE9marrer manuellement notre application.\"), mdx(\"p\", null, \"Nous souhaiterions aussi b\\xE9n\\xE9ficier d'un debugger et d'autres outils, comme un linter...\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"b2\"\n  }), \" b.2) Red\\xE9marrage automatique au changement d'un fichier\"), mdx(\"h3\", null, \"b.2.1) Configuration de l'utilisation de nodemon\"), mdx(\"p\", null, \"Il est possible de faire en sorte qu'\\xE0 chaque fois que vous sauvez un fichier, votre application \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"node.js\"), \" red\\xE9marre automatiquement.\"), mdx(\"p\", null, \"Voici la pr\\xE9c\\xE9dure :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installez \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"nodemon\"), \" au niveau du r\\xE9pertoire du projet :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm i nodemon -D\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pour lancer \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"nodemon\"), \" (au lieu du simple \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"node\"), \") quand on tape \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"npm run dev\")), \" : Veuillez ajouter la ligne \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"\\\"dev\\\": \\\"nodemon /bin/www\\\"\")), \" dans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"package.json\"), \" :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"{2}\",\n    \"{2}\": true\n  }, \"\\\"scripts\\\": {\\n    \\\"dev\\\": \\\"nodemon ./bin/www\\\",\\n    \\\"start\\\": \\\"node ./bin/www\\\"\\n  },\\n\")), mdx(\"h3\", null, \"b.2.2) Configuration des fichiers \\xE0 ignorer pour \\xE9viter des r\\xE9d\\xE9marrages\"), mdx(\"p\", null, \"Il est possible d'indiquer les fichiers qui doivent \\xEAtre ignor\\xE9s par \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nodemon\"), \" via l'ajout dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"\\\"nodemonConfig\\\": {\\n    \\\"ignore\\\": [\\n      \\\"data/*\\\"\\n    ]\\n  },\\n\")), mdx(\"p\", null, \"Dans la configuration ajout\\xE9e ci-dessous, tous les fichiers qui seraient mis \\xE0 jour dans le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data\"), \" ne provoqueront pas de red\\xE9marrage du serveur \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nodemon\"), \" lorsqu'il est lanc\\xE9 (en mode 'dev').\"), mdx(\"p\", null, \"Veuillez installer \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nodemon\"), \" dans le cadre de votre tutoriel \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api-persistence\"), \" et configurer celui-ci pour que l'application ne red\\xE9marre pas \\xE0 chaque fois que vous cr\\xE9ez une nouvelle pizza.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"N'h\\xE9sitez pas \\xE0 tester la cr\\xE9ation d'une pizza avant de dire \\xE0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nodemon\"), \" d'ignorer les fichiers se trouvant dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data\"), \".\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"b3\"\n  }), \" b.3) Debugging\"), mdx(\"h3\", null, \"b.3.1) Introduction\"), mdx(\"p\", null, \"Est-ce que nous pouvons utiliser VS Code pour d\\xE9bugger notre API ?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Oui, heureusement, car le debugger est probablement le meilleur ami des d\\xE9veloppeurs.\"), mdx(\"p\", null, \"Il est toujours l\\xE0 pour aider, \\xE0 l'\\xE9coute de nos investigations, mettant r\\xE9guli\\xE8rement en lumi\\xE8re des pistes de sortie de probl\\xE8mes, tout cela de mani\\xE8re bienveillante, sans jamais nous brusquer \\uD83D\\uDE01.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://code.visualstudio.com/docs/editor/debugging\"\n  }, \"Debugging via VS Code\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/web3/references/#r59\"\n  }, \"[R.59]\"), \" fournit le d\\xE9tails de comment d\\xE9bugger sous VS Code. Nous vous offrons par la suite une fa\\xE7on pratique de rapidement d\\xE9bugger.\"), mdx(\"h3\", null, \"b.3.2) Debugging sans configuration\"), mdx(\"p\", null, \"Sans aucune configuration, il est possible de d\\xE9bugger une application \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Node.js\"), \".\"), mdx(\"p\", null, \"Il suffit d'ouvrir le script d'entr\\xE9e de votre application dans VS Code. Pour une application Express, le script d'entr\\xE9e est \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/bin/www\"), \". Cliquez dans l'Explorer de VS Code sur \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/bin/www\"), \" de votre tutoriel \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api-persistence\"), \". Une fois le script \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/bin/www\"), \" ouvert, il ne reste plus qu'\\xE0 ex\\xE9cuter le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Debug\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Pour ce faire :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"soit vous cliquez sur l'ic\\xF4ne \\\"Run and Debug\\\" \\xE0 gauche de l'Explorer, puis sur le bouton \\\"Run and Debug\\\";\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"soit vous cliquez sur \\\"Run\\\" puis sur \\\"Start Debugging\\\";\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"soit vous cliquez sur \\\"F5\\\",\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Il est probable que la premi\\xE8re fois que vous lancez le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Debug\"), \", vous devrez s\\xE9lectionner \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Node.js\"), \"   (il sera indiqu\\xE9 : \\\"Select debugger\\\") comme debugger dans une liste.\")), mdx(\"p\", null, \"En r\\xE9sum\\xE9, une fois le debugger lanc\\xE9, il suffit d'ajouter des breakpoints dans le code source et d'ex\\xE9cuter le code pas \\xE0 pas.\"), mdx(\"p\", null, \"N'h\\xE9sitez pas \\xE0 ex\\xE9cuter pas \\xE0 pas une op\\xE9ration de votre api, comme la cr\\xE9ation d'une pizza par exemple.\"), mdx(\"h3\", null, \"b.3.3) Debugging avec une bonne configuration\"), mdx(\"p\", null, \"Trouver une configuration qui permet de bien d\\xE9bugger n'est pas si ais\\xE9. Nous allons donc voir ensemble comment mettre en place une configuration des plus utiles dans le cadre de ce cours.\"), mdx(\"p\", null, \"Premi\\xE8rement, il est important que quand on lance le debugger, on puisse b\\xE9n\\xE9ficier de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"nodemon\"), \" et des red\\xE9marrages automatiques en cas de changement de code.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Pour ce faire, veuillez mettre \\xE0 jour le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"packages.json\"), \" pour rajouter un script de d\\xE9marrage :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"{2}\",\n    \"{2}\": true\n  }, \"\\\"scripts\\\":\\xA0{\\n\\xA0\\xA0\\xA0\\xA0\\\"debug\\\":\\xA0\\\"nodemon\\xA0./bin/www\\\",\\n\\xA0\\xA0\\xA0\\xA0\\\"dev\\\":\\xA0\\\"nodemon\\xA0./bin/www\\\",\\n\\xA0\\xA0\\xA0\\xA0\\\"start\\\":\\xA0\\\"node\\xA0./bin/www\\\"\\n\\xA0\\xA0},\\n\")), mdx(\"p\", null, \"Nous allons maintenant cr\\xE9er une configuration de debugging associ\\xE9e \\xE0 notre repo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \" :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cliquez sur l'ic\\xF4ne \\\"Run and Debug\\\" \\xE0 gauche de l'Explorer, puis sur le lien \\\"create launch.json file\\\" (.vscode/launch.json).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quand il sera indiqu\\xE9 \\\"Select debugger\\\", s\\xE9lectionnez \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Node.js\"), \".\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"NB : Peu importe le debugger que vous s\\xE9lectionnez, car vous aller par la suite copier / coller la configuration propos\\xE9e.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Une fois le debugger \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Node.js\"), \" choisi, VS Code cr\\xE9e un r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \".vscode\"), \" \\xE0 la racine du folder ouvert au sein de VS Code (normalement vous devriez avoir ouvert votre repo local \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"web2\"), \") contenant un fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"launch.json\"), \" et une configuration initiale. Veuillez remplacer le contenu de ce fichier par celui-ci :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"{10-14,19}\",\n    \"{10-14,19}\": true\n  }, \"{\\n  // Use IntelliSense to learn about possible attributes.\\n  // Hover to view descriptions of existing attributes.\\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\\n  \\\"version\\\": \\\"0.2.0\\\",\\n  \\\"configurations\\\": [\\n    {\\n      \\\"name\\\": \\\"Launch via NPM\\\",\\n      \\\"request\\\": \\\"launch\\\",\\n      \\\"runtimeArgs\\\": [\\\"run-script\\\", \\\"debug\\\"],\\n      \\\"runtimeExecutable\\\": \\\"npm\\\",\\n      \\\"skipFiles\\\": [\\\"<node_internals>/**\\\"],\\n      \\\"type\\\": \\\"pwa-node\\\",\\n      \\\"cwd\\\": \\\"${fileDirname}\\\"\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"runtimeArgs\"), \" permet de s\\xE9lectionner le script \\xE0 lancer par le debugger, \\xE0 savoir ici : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"debug\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Ainsi, quand on lancera le debugger, celui-ci lancera le programme avec l'\\xE9quivalent de la commande \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"npm run debug\")), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"\\\"cwd\\\":\\\"${fileDirname}\\\"\")), \" : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"cwd\"), \" permet d'indiquer le chemin vers la racine du programme \\xE0 d\\xE9bugger. La variable \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fileDirname\"), \" permet de s\\xE9lectionner le programme \\xE0 d\\xE9bugger sur base du fichier ouvert et actif dans VS Code.\"), mdx(\"p\", null, \"Si vous avez plusieurs applications au sein d'un folder de VS Code, pour d\\xE9bugger une application en particulier, nous vous conseillons cette approche :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ouvrez le fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"package.json\"), \" de l'application \\xE0 d\\xE9bugger ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cliquez sur l'ic\\xF4ne \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Run and Debug\"), \" \\xE0 gauche de l'Explorer, puis cliquez sur \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Start Debugging\"), \" (ou cliquez juste sur \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"F5\"), \") en v\\xE9rifiant que la configuration de debugging s\\xE9lectionn\\xE9e est bien nomm\\xE9e \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Launch via NPM\"), \".\")), mdx(\"p\", null, \"Nottons que le nom de la configuration de debugging peut facilement \\xEAtre modifi\\xE9e en changeant la valeur de l'attribut \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"name\"), \" dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/.vscode/launch.json\"), \".\"), mdx(\"p\", null, \"Veuillez tester cette configuration de debugging au sein de votre repo local \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Vous pourriez par exemple observer pas \\xE0 pas une op\\xE9ration de suppression d'une pizza, afin de voir \\xE0 quel moment le contenu de l'array \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pizzas\"), \" est mis \\xE0 jour, ainsi que le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/data/pizzas.json\"), \".\"), mdx(\"p\", null, \"Si tout fonctionne bien, faites un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit\"), \" de votre repo (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \") avec le message \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api-persistence\"), \"\\\".\"), mdx(\"p\", null, \"En cas de souci, vous pouvez acc\\xE9der au code du tutoriel ici :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/persistence\"\n  }, \"api-persistence\"), \".\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"b4\"\n  }), \" b.4) Autres outils de d\\xE9veloppement\"), mdx(\"p\", null, \"Il serait utile de b\\xE9n\\xE9ficier :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d'un linter : celui-ci devrait imposer un \\\"style guide\\\" qui est \\xE9quivalent \\xE0 notre style de programmation pour les IHM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d'un formater : celui-ci devrait automatiquement permettre d'am\\xE9liorer le style de notre code pour se rapprocher de ce qui est impos\\xE9 par le linter.\")), mdx(\"p\", null, \"Un boilerplate a \\xE9t\\xE9 cr\\xE9\\xE9 afin de mettre en place ces outils :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/basic-api-boilerplate\"\n  }, \"basic-api-boilerplate\")), mdx(\"p\", null, \"Vous ne devez pas savoir comment cr\\xE9er et configurer un tel boilerplate.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"N\\xE9anmoins, pour les personnes tr\\xE8s curieuses, la cr\\xE9ation du boilerplate est expliqu\\xE9e dans le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"README\"), \" du boilerplate.\"), mdx(\"p\", null, \"Pour la suite du cours, nous n'utiliserons plus le g\\xE9n\\xE9rateur d'application Express, mais ce boilerplate.\"), mdx(\"p\", null, \"Il est important d'avoir install\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ESLint\"), \" et \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"prettier\"), \" au sein de VS Code pour bien utiliser le boilerplate d'une API.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Vous l'avez normalement d\\xE9j\\xE0 fait au module 2. Si non, veuillez suivre la proc\\xE9dure donn\\xE9e ici : \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/web3/modules/2/#a6\"\n  }, \"Module 2 : a.6) Installation des extensions pour le linter et le formater\")), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"c\"\n  }), \" c) Exercice 5.1 : Persistance de la RESTfull API pour myMovies\"), mdx(\"p\", null, \"Vous allez faire un refactor de la RESTful API de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"myMovies\"), \", afin d'utiliser les outils de d\\xE9veloppement modernes mis \\xE0 disposition dans un boilerplate et afin de rendre les donn\\xE9es persistantes dans un fichier JSON.\"), mdx(\"p\", null, \"Afin de r\\xE9aliser cet exercice, voici les contraintes d'impl\\xE9mentation :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Veuillez cr\\xE9er un nouveau projet dans votre repository local et votre web repository (normalement appel\\xE9 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"web2\"), \") nomm\\xE9 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/exercises/module5/5.1\"), \" sur base du boilerplate : \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/e-vinci/basic-api-boilerplate\"\n  }, \"basic-api-boilerplate\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reprenez le code du router que vous avez d\\xE9velopp\\xE9 \\xE0 l'exercice pr\\xE9c\\xE9dent (Exercice 4.1) et int\\xE9grez le dans votre nouveau projet.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Faites un refactor de votre API g\\xE9rant les films afin que les ressources persistent au sein du fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/data/films.json\"), \" ou \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/data/movies.json\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Veuillez tester toutes les fonctions de la RESTful API pour la collection de films \\xE0 l'aide du REST Client en copiant les requ\\xEAtes d\\xE9velopp\\xE9es pour l'Exercice 4.1 (fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"films.http\"), \" du r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"REST Client\"), \"). Normalement, il n'y a pas de nouvelles requ\\xEAtes \\xE0 \\xE9crire, il suffit juste de les ex\\xE9cuter.\")), mdx(\"p\", null, \"Le code de votre application web doit donc se trouver dans votre repository local et votre web repository (normalement appel\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \") dans le r\\xE9pertoire nomm\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/exercises/module5/5.1\"), \".\"), mdx(\"p\", null, \"Veuillez faire un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit\"), \" de votre code avec le message suivant : \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"myMovies : module 5 : persistent API\"), \"\\\".\"), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"d\"\n  }), \" d) Refactoring \\xE0 l'aide d'un \\\"fat model\\\"\"), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"d1\"\n  }), \" d.1) Architectures possibles ?\"), mdx(\"p\", null, \"Si nous reprenons le code actuel du tutoriel de l'API g\\xE9rant des pizzas (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/persistence\"\n  }, \"api-persistence\"), \"), nous pouvons d\\xE9tecter que celui-ci pourrait \\xEAtre plus propre.\"), mdx(\"p\", null, \"Par exemple, le routeur de \\\"pizzas\\\" s'occupe tant de g\\xE9rer les requ\\xEAtes des clients que d'acc\\xE9der directement aux donn\\xE9es.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"G\\xE9n\\xE9ralement, nous pr\\xE9f\\xE9rons s\\xE9parer le code g\\xE9rant les acc\\xE8s aux donn\\xE9es du code g\\xE9rant la pr\\xE9sentation du r\\xE9sultat des op\\xE9rations.\"), mdx(\"p\", null, \"On peut donc se demander comment s\\xE9parer le code traitant de sujets diff\\xE9rents, o\\xF9 ayant des responsabilit\\xE9s fort diff\\xE9rentes. Il existe une multitude d'architectures possibles, voici par exemple certains des plus grands noms :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Architecture MVC (Model View Controller)\"), \" ; au niveau backend, ce genre d'architecture est g\\xE9n\\xE9ralement tr\\xE8s utile quand on fait des MPA (ou Multi-Page Applications) via du Server-Side Rendering. Les \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Views\"), \" permettent de g\\xE9n\\xE9rer le frontend \\xE0 l'aide d'un moteur de templating ; le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Controller\"), \" s'occupe de traiter les requ\\xEAtes en appelant le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Model\"), \" pour l'acc\\xE8s aux op\\xE9rations sur les donn\\xE9es et en renvoyant les \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Views\"), \" ad\\xE9quates. Pour une API, cette architecture n'est pas la plus adapt\\xE9e.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Architecture classique \\\"three-tiers\\\"\"), \" ; au nivau backend, quand on d\\xE9veloppe une architecture trois tiers, cela signifie que l'on d\\xE9coupe notre API en trois couches :\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"couche de pr\\xE9sentation\"), \" : cette couche est responsable de pr\\xE9senter les ressources aux clients et d'interpr\\xE9ter les repr\\xE9sentations des ressources donn\\xE9es dans les requ\\xEAtes ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"couche business\"), \" : cette couche s'occupe de toute la logique de l'API, elle fait l'interm\\xE9diaire entre la couche de pr\\xE9sentation et la couche de donn\\xE9es ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"couche de donn\\xE9es\"), \" : cette couche s'occupe des acc\\xE8s aux donn\\xE9es et permet notamment la persistance des ressources au sein de bases de donn\\xE9es.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Le mod\\xE8le trois tiers est fort int\\xE9ressant, mais il demande un peu trop d'\\xE9criture de codes sans grande valeur ajout\\xE9e quand nous utilisons le framework Express.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"...\")), mdx(\"p\", null, \"Finalement, parmi les architectures classiques, il n'y a pas r\\xE9ellement une architecture qui colle parfaitement \\xE0 ce qui est offert par le framework Express, sans devoir \\xE9crire du code sans valeur ajout\\xE9e.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Ainsi, nous allons simplement cr\\xE9er notre propre architecture \\\"maison\\\", sur base de ces points :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On souhaite pouvoir facilement remplacer la couche d'acc\\xE8s aux donn\\xE9es sans changer la repr\\xE9sentation des ressources ; en effet, dans un premier temps, nous sauvegarderons des donn\\xE9es dans des fichiers JSON. Plus tard, si l'on venait \\xE0 sauvegarder les donn\\xE9es dans un syst\\xE8me de gestion de base de donn\\xE9es, on ne veut pas devoir mettre \\xE0 jour le code prenant en compte les requ\\xEAtes des clients et pr\\xE9sentant la r\\xE9ponse \\xE0 ces requ\\xEAtes ; en gros, on souhaite que le code de nos routers, au sein d'Express, soit ind\\xE9pendant de l'impl\\xE9mentation des acc\\xE8s aux donn\\xE9es.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nous n'avons pas vraiment de contraintes pour l'aspect \\\"business\\\" de nos APIs : la logique de l'application peut soit s'associer \\xE0 la couche de donn\\xE9es, soit \\xE0 la couche pr\\xE9sentation. N\\xE9anmoins, nous allons pr\\xE9f\\xE9rez associer un maximum de la logique de notre application \\xE0 ce que nous allons appeler un \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \". Le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \" contiendra toutes les op\\xE9rations possibles sur les ressources, ainsi que les acc\\xE8s aux donn\\xE9es.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \" peut \\xEAtre soit \\xE9crit en orient\\xE9 objet, soit simplement \\xEAtre un module fournissant des fonctions. Dans le cadre de ce cours, nous choisissons de pr\\xE9senter un maximum de programmation fonctionnelle plut\\xF4t que de l'orient\\xE9 objet.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"N\\xE9anmoins, n'h\\xE9sitez pas \\xE0 \\xE9crire des classes si cela vous tient \\xE0 coeur \\uD83D\\uDE09.\")), mdx(\"h2\", null, mdx(\"a\", {\n    id: \"d1\"\n  }), \" d.2) Architecture Express & \\\"fat model\\\"\"), mdx(\"p\", null, \"Voici l'architecture que nous allons appliquer dans nos prochaines API :\"), mdx(ScrollableImage, {\n    name: \"architecture.png\",\n    minWidth: \"859px\",\n    maxWidth: \"859px\",\n    mdxType: \"ScrollableImage\"\n  }), mdx(\"figcaption\", null, \"Architecture recommand\\xE9e pour ce cours\"), mdx(\"p\", null, \"Voici quelques explications sur ce diagramme que nous allons appliquer dans le prochain tutoriel :\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Un client fait la requ\\xEAte \\xE0 l'API demandant de lire toutes les pizzas.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Le router de \\\"pizzas\\\" prend le r\\xF4le de \\\"Controller\\\". Il s'occupe de traiter de la requ\\xEAte et d'appeler une op\\xE9ration du \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \" pour acc\\xE9der aux ressources.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \" s'occupe d'acc\\xE9der aux donn\\xE9es, qui se trouvent au sein d'un fichier JSON, et de les lire.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fat model\"), \" retourne un objet JS des donn\\xE9es au router de \\\"pizzas\\\".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Le router de \\\"pizzas\\\" renvoient une repr\\xE9sentation JSON de l'objet JS, un array de pizzas, au client.\")), mdx(\"p\", null, \"Nous allons maintenant faire un refactor de notre API de gestion des pizzas en cr\\xE9ant et utilisant un \\\"fat model\\\".\"), mdx(\"p\", null, \"Au sein de votre repo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \", \\xE0 l'aide du boilerplate du cours \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/basic-api-boilerplate\"\n  }, \"basic-api-boilerplate\"), \", veuillez cr\\xE9er le projet nomm\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/web2/tutorials/pizzeria/api/fat-model\"), \".\"), mdx(\"p\", null, \"Si vous ne voyez pas comment utiliser le boilerplate, tout est expliqu\\xE9 dans le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"README\"), \" associ\\xE9 au repository.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"N'h\\xE9sitez pas \\xE0 le lire ; )\"), mdx(\"p\", null, \"Pour la suite du tutoriel, nous consid\\xE9rons que tous les chemins absolus d\\xE9marrent du r\\xE9pertoire\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/web2/tutorials/pizzeria/api/fat-model\"), \".\"), mdx(\"p\", null, \"Nous allons commencer par cr\\xE9er le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fat model\"), \" offrant les op\\xE9rations sur les pizzas.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Veuillez cr\\xE9er le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/models/pizzas.js\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Au sein de ce fichier, veuillez ajouter le code s'occupant des op\\xE9rations sur les ressources de type \\\"pizzas\\\" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const path = require('node:path');\\nconst { parse, serialize } = require('../utils/json');\\n\\nconst jsonDbPath = path.join(__dirname, '/../data/pizzas.json');\\n\\nconst defaultPizzas = [\\n  {\\n    id: 1,\\n    title: '4 fromages',\\n    content: 'Gruy\\xE8re, S\\xE9rac, Appenzel, Gorgonzola, Tomates',\\n  },\\n  {\\n    id: 2,\\n    title: 'Vegan',\\n    content: 'Tomates, Courgettes, Oignons, Aubergines, Poivrons',\\n  },\\n  {\\n    id: 3,\\n    title: 'Vegetarian',\\n    content: 'Mozarella, Tomates, Oignons, Poivrons, Champignons, Olives',\\n  },\\n  {\\n    id: 4,\\n    title: 'Alpage',\\n    content: 'Gruy\\xE8re, Mozarella, Lardons, Tomates',\\n  },\\n  {\\n    id: 5,\\n    title: 'Diable',\\n    content: 'Tomates, Mozarella, Chorizo piquant, Jalapenos',\\n  },\\n];\\n\\nfunction readAllPizzas(orderBy) {\\n  const orderByTitle = orderBy?.includes('title') ? orderBy : undefined;\\n  let orderedMenu;\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  if (orderByTitle)\\n    orderedMenu = [...pizzas].sort((a, b) => a.title.localeCompare(b.title));\\n  if (orderByTitle === '-title') orderedMenu = orderedMenu.reverse();\\n\\n  const allPizzasPotentiallyOrderd = orderedMenu ?? pizzas;\\n  return allPizzasPotentiallyOrderd;\\n}\\n\\nfunction readOnePizza(id) {\\n  const idNumber = parseInt(id, 10);\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  const indexOfPizzaFound = pizzas.findIndex((pizza) => pizza.id === idNumber);\\n  if (indexOfPizzaFound < 0) return undefined;\\n\\n  return pizzas[indexOfPizzaFound];\\n}\\n\\nfunction createOnePizza(title, content) {\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n\\n  const createdPizza = {\\n    id: getNextId(),\\n    title,\\n    content,\\n  };\\n\\n  pizzas.push(createdPizza);\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return createdPizza;\\n}\\n\\nfunction getNextId() {\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  const lastItemIndex = pizzas?.length !== 0 ? pizzas.length - 1 : undefined;\\n  if (lastItemIndex === undefined) return 1;\\n  const lastId = pizzas[lastItemIndex]?.id;\\n  const nextId = lastId + 1;\\n  return nextId;\\n}\\n\\nfunction deleteOnePizza(id) {\\n  const idNumber = parseInt(id, 10);\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\\n  if (foundIndex < 0) return undefined;\\n  const deletedPizzas = pizzas.splice(foundIndex, 1);\\n  const deletedPizza = deletedPizzas[0];\\n  serialize(jsonDbPath, pizzas);\\n\\n  return deletedPizza;\\n}\\n\\nfunction updateOnePizza(id, propertiesToUpdate) {\\n  const idNumber = parseInt(id, 10);\\n  const pizzas = parse(jsonDbPath, defaultPizzas);\\n  const foundIndex = pizzas.findIndex((pizza) => pizza.id === idNumber);\\n  if (foundIndex < 0) return undefined;\\n\\n  const updatedPizza = { ...pizzas[foundIndex], ...propertiesToUpdate };\\n\\n  pizzas[foundIndex] = updatedPizza;\\n\\n  serialize(jsonDbPath, pizzas);\\n\\n  return updatedPizza;\\n}\\n\\nmodule.exports = {\\n  readAllPizzas,\\n  readOnePizza,\\n  createOnePizza,\\n  deleteOnePizza,\\n  updateOnePizza,\\n};\\n\")), mdx(\"p\", null, \"Maintenant, il ne reste plus qu'\\xE0 mettre \\xE0 jour le router \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/routes/pizzas.js\"), \" afin de faire les appels aux fonctions offertes par le mod\\xE8le :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const express = require('express');\\nconst {\\n  readAllPizzas,\\n  readOnePizza,\\n  createOnePizza,\\n  deleteOnePizza,\\n  updateOnePizza,\\n} = require('../models/pizzas');\\n\\nconst router = express.Router();\\n\\n/* Read all the pizzas from the menu\\n   GET /pizzas?order=title : ascending order by title\\n   GET /pizzas?order=-title : descending order by title\\n*/\\nrouter.get('/', (req, res) => {\\n  const allPizzasPotentiallyOrdered = readAllPizzas(req?.query?.order);\\n\\n  return res.json(allPizzasPotentiallyOrdered);\\n});\\n\\n// Read the pizza identified by an id in the menu\\nrouter.get('/:id', (req, res) => {\\n  const foundPizza = readOnePizza(req.params.id);\\n\\n  if (!foundPizza) return res.sendStatus(404);\\n\\n  return res.json(foundPizza);\\n});\\n\\n// Create a pizza to be added to the menu.\\nrouter.post('/', (req, res) => {\\n  const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\\n  const content =\\n    req?.body?.content?.length !== 0 ? req.body.content : undefined;\\n\\n  if (!title || !content) return res.sendStatus(400); // error code '400 Bad request'\\n\\n  const createdPizza = createOnePizza(title, content);\\n\\n  return res.json(createdPizza);\\n});\\n\\n// Delete a pizza from the menu based on its id\\nrouter.delete('/:id', (req, res) => {\\n  const deletedPizza = deleteOnePizza(req.params.id);\\n\\n  if (!deletedPizza) return res.sendStatus(404);\\n\\n  return res.json(deletedPizza);\\n});\\n\\n// Update a pizza based on its id and new values for its parameters\\nrouter.patch('/:id', (req, res) => {\\n  const title = req?.body?.title;\\n  const content = req?.body?.content;\\n\\n  if ((!title && !content) || title?.length === 0 || content?.length === 0) {\\n    return res.sendStatus(400);\\n  }\\n\\n  const updatedPizza = updateOnePizza(req.params.id, { title, content });\\n\\n  if (!updatedPizza) return res.sendStatus(404);\\n\\n  return res.json(updatedPizza);\\n});\\n\\nmodule.exports = router;\\n\")), mdx(\"p\", null, \"Lancer votre API soit via le debugger, soit via la commande \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"npm run dev\")), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Veuillez ensuite tester que tout fonctionne bien en ex\\xE9cutant les requ\\xEAtes HTTP d\\xE9j\\xE0 pr\\xE9sentes dans le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"REST Client\"), \" du boilerplate.\"), mdx(\"p\", null, \"Si tout fonctionne bien, faites un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit\"), \" de votre repo (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \") avec le message \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fat-model\"), \"\\\".\"), mdx(\"p\", null, \"En cas de souci, vous pouvez acc\\xE9der au code du tutoriel ici :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model\"\n  }, \"fat-model\"), \".\"), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"e\"\n  }), \" e) Exercice 5.2 : Refactoring de la RESTfull API pour myMovies\"), mdx(\"p\", null, \"Vous allez faire un nouveau refactor de la RESTful API de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"myMovies\"), \", afin de restructurer l'architecture de l'application selon l'architecture recommand\\xE9e, en utilisant un \\\"fat model\\\" pour g\\xE9rer les op\\xE9rations sur les films.\"), mdx(\"p\", null, \"Afin de r\\xE9aliser cet exercice, voici les contraintes d'impl\\xE9mentation :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Veuillez cr\\xE9er un nouveau projet dans votre repository local et votre web repository (normalement appel\\xE9 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"web2\"), \") nomm\\xE9 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/exercises/module5/5.2\"), \" sur base d'une copie de votre Exercice 5.1 ou sur base du boilerplate : \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/e-vinci/basic-api-boilerplate\"\n  }, \"basic-api-boilerplate\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Faites un refactor de votre API g\\xE9rant les films afin que tout ce qui traite des op\\xE9rations sur les ressources soit fait au sein du mod\\xE8le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/models/films.json\"), \" ou \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"/models/movies.json\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Veuillez tester toutes les fonctions de la RESTful API pour la collection de films \\xE0 l'aide du REST Client en copiant les requ\\xEAtes d\\xE9velopp\\xE9es pour l'Exercice 4.1 (fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"films.http\"), \" du r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"REST Client\"), \"). Normalement, il n'y a pas de nouvelles requ\\xEAtes \\xE0 \\xE9crire, il suffit juste de les ex\\xE9cuter.\")), mdx(\"p\", null, \"Le code de votre application web doit donc se trouver dans votre repository local et votre web repository (normalement appel\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"web2\"), \") dans le r\\xE9pertoire nomm\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/exercises/module5/5.2\"), \".\"), mdx(\"p\", null, \"Veuillez faire un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"commit\"), \" de votre code avec le message suivant : \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"myMovies : module 5 : API with fat-model\"), \"\\\".\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"modules/5.fr","frontmatter":{"title":"Module 5 : Service web persistant via JSON et architectur√©","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Persistance des ressources via fichiers JSON & refactor du code d'une RESTful API","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='512'%20height='512'%20viewBox='0%200%20512%20512'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M227%202a256%20256%200%201059%20509A256%20256%200%2000227%202m7%2054c-82%209-150%2068-172%20147l-2%208%20120%20121c116%20116%20121%20120%20124%20119%2021-4%2052-19%2074-35%2047-35%2079-98%2079-154v-6H329v36h44l43%201a167%20167%200%2001-97%20115l-8%203-105-105-105-105%203-8a165%20165%200%2001287-32l27-23a202%20202%200%2000-184-82M56%20267a200%20200%200%2000196%20189L56%20260v7'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='544'%20height='492'%20viewBox='0%200%20544%20492'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M146%207c-31%208-51%2035-50%2068%201%2015%203%2020%2023%2056a3456%203456%200%200090%20151%2053177%2053177%200%200182%20145c16%2029%2018%2031%2026%2039a66%2066%200%2000113-47c0-19-1-20-33-75l-28-49h52c56%200%2064%200%2075-4a67%2067%200%2000-2-127l-8-2-39-1h-39l17-30c22-38%2023-41%2023-59%200-13%200-15-2-22a66%2066%200%2000-110-25c-8%208-9%2010-35%2055l-28%2048-28-47c-27-46-28-48-36-56a64%2064%200%2000-63-18'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/web3/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/web3/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/web3/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}}]}},"pageContext":{"slug":"/modules/5/"}},"staticQueryHashes":["1696221415","3028011774","3458129946","493526238","575455071"]}